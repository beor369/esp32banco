
#include <Arduino.h>
#include <Wire.h>
#include <U8g2lib.h>
#include <Adafruit_I2CDevice.h>
#include <ESP32Encoder.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_MPU6050.h>


// Pines del encoder
#define ENCODER_PIN_A 42
#define ENCODER_PIN_B 41

// Pin del botón del encoder
const int botonPin = 40; // SW al pin 1
#define DEBOUNCE_DELAY 10  // Tiempo de debounce en milisegundos
unsigned long lastDebounceTime = 0;
int lastButtonState = HIGH; // Estado anterior del botón (asumimos que no está presionado)
int buttonState;            // Estado actual del botón

// Inicialización de la pantalla con los pines SDA (21) y SCL (20)
U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE, /* clock=*/ 20, /* data=*/ 21);
// Instancia del encoder
ESP32Encoder encoder;

// Variables del teclado virtual
const char* virtualKeypad = "1234567890-<>";
int indiceVirtualKeypad = 0;
String input = ""; // Variable para almacenar el input

// Configuración de la EEPROM
const int EEPROM_SIZE = 512; // Tamaño de la EEPROM
const int BASE_ADDRESS = 0; // Dirección base en la EEPROM para almacenar las resistencias de los inyectores base
const int CLICK_FREQUENCY_ADDRESS = BASE_ADDRESS + sizeof(float); // Dirección en la EEPROM para almacenar la frecuencia del clic

volatile uint32_t pulseCount = 0; // Contador de pulsos
float calibrationFactor = 4.5; // Ajusta según tu sensor
float flowRate = 0;
float flowMillilitres = 0;
unsigned long oldTime = 0;
// Configuración del Encoder
const unsigned long encoderMoveDelay = 200; // Retardo de 200 ms para el filtro de debouncing
unsigned long lastEncoderMoveTime = 0; // Tiempo del último movimiento del encoder

// Definición de estados
enum Estado {
  MENU_SELECCION_INYECTOR,
  MENU_PRINCIPAL,
  MENU_RESISTENCIA,
  MENU_PRUEBA,
  SUBMENU_MANUAL,
  SUBMENU_AUTOMATICO,
  SUBMENU_MID_RES,
  SUBMENU_FLUJO,
  SUBMENU_FUGAS,
  SUBMENU_CLICK,
  SUBMENU_ABANICO,
  SUBMENU_RESULTADOS,
  SUBMENU_FUNCIONAMIENTO,
  AYUDA,
  ATRAS,
  DEVOLVER,
  AGREGAR_INJECTOR,
  MENU_CARACTERISTICAS,
  ATRASITO,
  SELECCIONAR_MOTO,
  SIGUIENTE,
  MENU_CONFIRMA_MOTO
};
// Variables de estado
Estado estadoActual = MENU_PRINCIPAL;
int indiceMenu = 0;
int indiceInyector = 0;
int indiceSubMenu = 0;
int indiceSubSubMenu = 0;
int indicefuncionamiento = 0;
int indiceseleccionarmoto = 0;
int indiceMotoSeleccionada = 0;

// Espacios para las imágenes
const unsigned char iniciar_prueba[] PROGMEM = {0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 
	0x02, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 
	0x81, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x61, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x91, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x91, 0x0f, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x89, 0x1f, 0x08, 0x63, 0xc6, 0xf0, 0x30, 0x3c, 0x3e, 0xe0, 0xe3, 0x63, 0xe6, 0xe7, 0xc3, 0xd3, 
	0x89, 0x7f, 0x08, 0x63, 0xc6, 0x98, 0x31, 0x66, 0x66, 0x60, 0x66, 0x66, 0x66, 0x60, 0x66, 0x16, 
	0x85, 0xff, 0x10, 0x63, 0xc6, 0x18, 0x30, 0x66, 0x66, 0x60, 0x66, 0x66, 0x66, 0x60, 0x66, 0x96, 
	0x85, 0xff, 0x11, 0xe3, 0xc6, 0x18, 0x30, 0x66, 0x66, 0x60, 0x66, 0x66, 0x66, 0x60, 0x66, 0x16, 
	0x85, 0xff, 0x13, 0xe3, 0xc7, 0x18, 0x30, 0x66, 0x3e, 0xe0, 0xe3, 0x63, 0xe6, 0xe1, 0x63, 0x96, 
	0x85, 0xff, 0x11, 0x63, 0xc7, 0x18, 0x30, 0x7e, 0x1e, 0x60, 0xe0, 0x61, 0x66, 0x60, 0xe6, 0x17, 
	0x85, 0xff, 0x10, 0x63, 0xc6, 0x18, 0x30, 0x66, 0x36, 0x60, 0x60, 0x63, 0x66, 0x60, 0x66, 0x96, 
	0x89, 0x7f, 0x08, 0x63, 0xc6, 0x98, 0x31, 0x66, 0x66, 0x60, 0x60, 0x66, 0x66, 0x60, 0x66, 0x16, 
	0x89, 0x3f, 0x08, 0x63, 0xc6, 0xf0, 0x30, 0x66, 0x66, 0x60, 0x60, 0xc6, 0xe3, 0xe7, 0x63, 0x96, 
	0x91, 0x0f, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x91, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 
	0x61, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x82, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xe0, 0x07, 0x00, 0x80, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xe0, 0x07, 0x00, 0x40, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0x31, 0x00, 0x47, 0xc4, 0xf1, 0x10, 0x0f, 0x10, 0x11, 0x88, 0xe3, 0xe3, 0x78, 0x00, 0x80, 
	0x00, 0x40, 0x80, 0x48, 0x24, 0x12, 0x11, 0x11, 0x10, 0x11, 0x48, 0x84, 0x10, 0x89, 0x00, 0x00, 
	0x78, 0xc0, 0x81, 0x48, 0x24, 0x12, 0x11, 0x11, 0x10, 0x11, 0x48, 0x80, 0x10, 0x89, 0x00, 0x80, 
	0xe0, 0xe0, 0x83, 0xc8, 0x24, 0x12, 0x11, 0x11, 0x10, 0x13, 0x48, 0x80, 0x10, 0x89, 0x00, 0x00, 
	0xc0, 0xff, 0x83, 0x48, 0x25, 0x12, 0x11, 0x0f, 0x10, 0x15, 0x48, 0x80, 0x10, 0x79, 0x00, 0x80, 
	0xc0, 0xff, 0x83, 0x4f, 0xe6, 0x13, 0x11, 0x05, 0x10, 0x19, 0x48, 0x80, 0x10, 0x29, 0x00, 0x00, 
	0x80, 0xff, 0x80, 0x48, 0x24, 0x12, 0x11, 0x09, 0x10, 0x11, 0x48, 0x80, 0x10, 0x49, 0x00, 0x80, 
	0x40, 0x7e, 0x81, 0x48, 0x24, 0x12, 0x11, 0x11, 0x10, 0x91, 0x48, 0x84, 0x10, 0x89, 0x00, 0x00, 
	0xe0, 0x3c, 0x87, 0x48, 0x24, 0xf2, 0x10, 0x11, 0x10, 0x11, 0x87, 0x83, 0xe0, 0x88, 0x00, 0x80, 
	0xb0, 0x99, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x81, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xb0, 0x81, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xe0, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0x07, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x0f, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x30, 0x0f, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xf0, 0x8f, 0x03, 0x8e, 0x48, 0xe4, 0xe1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xf0, 0xcf, 0x01, 0x91, 0x48, 0x24, 0x12, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xe0, 0xdf, 0x00, 0x91, 0x48, 0x24, 0x12, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xc0, 0x3f, 0x00, 0x11, 0x45, 0x24, 0x12, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x7c, 0x00, 0x11, 0x42, 0x24, 0x12, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0xfb, 0x07, 0x1f, 0x42, 0x24, 0xf2, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x80, 0xf7, 0x0f, 0x11, 0x42, 0x24, 0x12, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xc0, 0xef, 0x1f, 0x11, 0x42, 0x24, 0x12, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xe0, 0xef, 0x1f, 0x11, 0x82, 0xe3, 0x11, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xf0, 0xe7, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xb0, 0xe3, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xf0, 0xc1, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xe0, 0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; // Aquí irá la imagen para "Iniciar Prueba"
const unsigned char agregar_inyector[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x80, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x60, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x90, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x90, 0x0f, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x88, 0x1f, 0x08, 0x11, 0x11, 0x0e, 0xe1, 0x78, 0xc0, 0xe3, 0x11, 0xf9, 0x3c, 0x1c, 0x00, 0x00, 
	0x88, 0x7f, 0x08, 0x11, 0x11, 0x11, 0x11, 0x89, 0x40, 0x24, 0x12, 0x09, 0x44, 0x22, 0x00, 0x80, 
	0x84, 0xff, 0x10, 0x11, 0x11, 0x01, 0x11, 0x89, 0x40, 0x24, 0x12, 0x09, 0x44, 0x22, 0x00, 0x00, 
	0x84, 0xff, 0x11, 0x31, 0x11, 0x01, 0x11, 0x89, 0x40, 0x24, 0x12, 0x09, 0x44, 0x22, 0x00, 0x80, 
	0x84, 0xff, 0x13, 0x51, 0x11, 0x01, 0x11, 0x79, 0xc0, 0xe3, 0x11, 0x39, 0x3c, 0x22, 0x00, 0x00, 
	0x84, 0xff, 0x11, 0x91, 0x11, 0x01, 0xf1, 0x29, 0x40, 0xa0, 0x10, 0x09, 0x44, 0x3e, 0x00, 0x80, 
	0x84, 0xff, 0x10, 0x11, 0x11, 0x01, 0x11, 0x49, 0x40, 0x20, 0x11, 0x09, 0x44, 0x22, 0x00, 0x00, 
	0x88, 0x7f, 0x08, 0x11, 0x11, 0x11, 0x11, 0x89, 0x40, 0x20, 0x12, 0x09, 0x44, 0x22, 0x00, 0x80, 
	0x88, 0x3f, 0x08, 0x11, 0x11, 0x0e, 0x11, 0x89, 0x40, 0x20, 0xe2, 0xf8, 0x3c, 0x22, 0x00, 0x00, 
	0x90, 0x0f, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x90, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x60, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x80, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
	0x81, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x81, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0xe1, 0x07, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0xe1, 0x07, 0x00, 0x80, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x81, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x81, 0x31, 0x00, 0x8f, 0x19, 0x8f, 0x0f, 0xe3, 0x03, 0x8c, 0x19, 0x18, 0x8f, 0x1f, 0x8f, 0xdf, 
	0x01, 0x40, 0x80, 0x99, 0x99, 0x99, 0x19, 0x63, 0x06, 0x8c, 0x19, 0x98, 0x19, 0x86, 0x99, 0xd9, 
	0x79, 0xc0, 0x81, 0x99, 0x99, 0x99, 0x19, 0x63, 0x06, 0x8c, 0x19, 0x98, 0x01, 0x86, 0x99, 0x19, 
	0xe1, 0xe0, 0x83, 0x99, 0x9b, 0x99, 0x19, 0x63, 0x06, 0x8c, 0x1b, 0x98, 0x01, 0x86, 0x99, 0x99, 
	0xc1, 0xff, 0x83, 0x99, 0x9f, 0x99, 0x19, 0xe3, 0x03, 0x8c, 0x1f, 0x98, 0x01, 0x86, 0x99, 0x1f, 
	0xc1, 0xff, 0x83, 0x9f, 0x9d, 0x9f, 0x19, 0xe3, 0x01, 0x8c, 0x1d, 0x98, 0x01, 0x86, 0x99, 0x97, 
	0x81, 0xff, 0x80, 0x99, 0x99, 0x99, 0x19, 0x63, 0x03, 0x8c, 0x19, 0x98, 0x01, 0x86, 0x99, 0x1d, 
	0x41, 0x7e, 0x81, 0x99, 0x99, 0x99, 0x19, 0x63, 0x06, 0x8c, 0x99, 0x99, 0x19, 0x86, 0x99, 0x99, 
	0xe1, 0x3c, 0x87, 0x99, 0x99, 0x99, 0x0f, 0x63, 0x06, 0x8c, 0x19, 0x0f, 0x0f, 0x06, 0x8f, 0x19, 
	0xb1, 0x99, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 
	0x11, 0x81, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0xb2, 0x81, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x80, 0x07, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x0f, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x30, 0x0f, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xf0, 0x8f, 0x03, 0x8e, 0x48, 0xe4, 0xe1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xf0, 0xcf, 0x01, 0x91, 0x48, 0x24, 0x12, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xe0, 0xdf, 0x00, 0x91, 0x48, 0x24, 0x12, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xc0, 0x3f, 0x00, 0x11, 0x45, 0x24, 0x12, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x7c, 0x00, 0x11, 0x42, 0x24, 0x12, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0xfb, 0x07, 0x1f, 0x42, 0x24, 0xf2, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0xf7, 0x0f, 0x11, 0x42, 0x24, 0x12, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xc0, 0xef, 0x1f, 0x11, 0x42, 0x24, 0x12, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xe0, 0xef, 0x1f, 0x11, 0x82, 0xe3, 0x11, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xf0, 0xe7, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xb0, 0xe3, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xf0, 0xc1, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xe0, 0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80}; // Aquí irá la imagen para "Agregar Inyector"
const unsigned char ayuda[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x80, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x60, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x90, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x90, 0x0f, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x88, 0x1f, 0x08, 0x11, 0x11, 0x0e, 0xe1, 0x78, 0xc0, 0xe3, 0x11, 0xf9, 0x3c, 0x1c, 0x00, 0x00, 
	0x88, 0x7f, 0x08, 0x11, 0x11, 0x11, 0x11, 0x89, 0x40, 0x24, 0x12, 0x09, 0x44, 0x22, 0x00, 0x80, 
	0x84, 0xff, 0x10, 0x11, 0x11, 0x01, 0x11, 0x89, 0x40, 0x24, 0x12, 0x09, 0x44, 0x22, 0x00, 0x00, 
	0x84, 0xff, 0x11, 0x31, 0x11, 0x01, 0x11, 0x89, 0x40, 0x24, 0x12, 0x09, 0x44, 0x22, 0x00, 0x80, 
	0x84, 0xff, 0x13, 0x51, 0x11, 0x01, 0x11, 0x79, 0xc0, 0xe3, 0x11, 0x39, 0x3c, 0x22, 0x00, 0x00, 
	0x84, 0xff, 0x11, 0x91, 0x11, 0x01, 0xf1, 0x29, 0x40, 0xa0, 0x10, 0x09, 0x44, 0x3e, 0x00, 0x80, 
	0x84, 0xff, 0x10, 0x11, 0x11, 0x01, 0x11, 0x49, 0x40, 0x20, 0x11, 0x09, 0x44, 0x22, 0x00, 0x00, 
	0x88, 0x7f, 0x08, 0x11, 0x11, 0x11, 0x11, 0x89, 0x40, 0x20, 0x12, 0x09, 0x44, 0x22, 0x00, 0x80, 
	0x88, 0x3f, 0x08, 0x11, 0x11, 0x0e, 0x11, 0x89, 0x40, 0x20, 0xe2, 0xf8, 0x3c, 0x22, 0x00, 0x00, 
	0x90, 0x0f, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x90, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x60, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x80, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xe0, 0x07, 0x00, 0x80, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xe0, 0x07, 0x00, 0x40, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x80, 0x31, 0x00, 0x47, 0xc4, 0xf1, 0x10, 0x0f, 0x10, 0x11, 0x88, 0xe3, 0xe3, 0x78, 0x00, 0x00, 
	0x00, 0x40, 0x80, 0x48, 0x24, 0x12, 0x11, 0x11, 0x10, 0x11, 0x48, 0x84, 0x10, 0x89, 0x00, 0x80, 
	0x78, 0xc0, 0x81, 0x48, 0x24, 0x12, 0x11, 0x11, 0x10, 0x11, 0x48, 0x80, 0x10, 0x89, 0x00, 0x00, 
	0xe0, 0xe0, 0x83, 0xc8, 0x24, 0x12, 0x11, 0x11, 0x10, 0x13, 0x48, 0x80, 0x10, 0x89, 0x00, 0x80, 
	0xc0, 0xff, 0x83, 0x48, 0x25, 0x12, 0x11, 0x0f, 0x10, 0x15, 0x48, 0x80, 0x10, 0x79, 0x00, 0x00, 
	0xc0, 0xff, 0x83, 0x4f, 0xe6, 0x13, 0x11, 0x05, 0x10, 0x19, 0x48, 0x80, 0x10, 0x29, 0x00, 0x80, 
	0x80, 0xff, 0x80, 0x48, 0x24, 0x12, 0x11, 0x09, 0x10, 0x11, 0x48, 0x80, 0x10, 0x49, 0x00, 0x00, 
	0x40, 0x7e, 0x81, 0x48, 0x24, 0x12, 0x11, 0x11, 0x10, 0x91, 0x48, 0x84, 0x10, 0x89, 0x00, 0x80, 
	0xe0, 0x3c, 0x87, 0x48, 0x24, 0xf2, 0x10, 0x11, 0x10, 0x11, 0x87, 0x83, 0xe0, 0x88, 0x00, 0x00, 
	0xb0, 0x99, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x10, 0x81, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xb0, 0x81, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xe0, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
	0x81, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x81, 0x07, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x01, 0x0f, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x31, 0x0f, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0xf1, 0x8f, 0x03, 0x1e, 0x33, 0x33, 0x1f, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0xf1, 0xcf, 0x01, 0x33, 0x33, 0x33, 0x33, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0xe1, 0xdf, 0x00, 0x33, 0x33, 0x33, 0x33, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0xc1, 0x3f, 0x00, 0x33, 0x1e, 0x33, 0x33, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x01, 0x7c, 0x00, 0x33, 0x0c, 0x33, 0x33, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 
	0x01, 0xfb, 0x07, 0x3f, 0x0c, 0x33, 0x33, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x81, 0xf7, 0x0f, 0x33, 0x0c, 0x33, 0x33, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 
	0xc1, 0xef, 0x1f, 0x33, 0x0c, 0x33, 0x33, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0xe1, 0xef, 0x1f, 0x33, 0x0c, 0x1e, 0x1f, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 
	0xf1, 0xe7, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0xb1, 0xe3, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 
	0xf1, 0xc1, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0xe2, 0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87}; // Aquí irá la imagen para "Ayuda"
const unsigned char modo_manual[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 
	0x02, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
	0x81, 0x81, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x41, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x21, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x11, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x89, 0x99, 0x11, 0xc6, 0x78, 0x7c, 0x78, 0x80, 0x31, 0x1e, 0x33, 0x33, 0x1e, 0x03, 0x00, 0xd0, 
	0x89, 0x99, 0x11, 0xc6, 0xcc, 0xcc, 0xcc, 0x80, 0x31, 0x33, 0x33, 0x33, 0x33, 0x03, 0x00, 0xd0, 
	0x85, 0x99, 0x21, 0xee, 0xcc, 0xcc, 0xcc, 0x80, 0x3b, 0x33, 0x33, 0x33, 0x33, 0x03, 0x00, 0xd0, 
	0x85, 0x99, 0x21, 0xfe, 0xcc, 0xcc, 0xcc, 0x80, 0x3f, 0x33, 0x37, 0x33, 0x33, 0x03, 0x00, 0x10, 
	0xc5, 0xff, 0x23, 0xd6, 0xcc, 0xcc, 0xcc, 0x80, 0x35, 0x33, 0x3f, 0x33, 0x33, 0x03, 0x00, 0x90, 
	0xc5, 0xff, 0x23, 0xc6, 0xcc, 0xcc, 0xcc, 0x80, 0x31, 0x3f, 0x3b, 0x33, 0x3f, 0x03, 0x00, 0x10, 
	0x85, 0x99, 0x21, 0xc6, 0xcc, 0xcc, 0xcc, 0x80, 0x31, 0x33, 0x33, 0x33, 0x33, 0x03, 0x00, 0x90, 
	0x85, 0x99, 0x21, 0xc6, 0xcc, 0xcc, 0xcc, 0x80, 0x31, 0x33, 0x33, 0x33, 0x33, 0x03, 0x00, 0x10, 
	0x89, 0x99, 0x11, 0xc6, 0x78, 0x7c, 0x78, 0x80, 0x31, 0x33, 0x33, 0x1e, 0x33, 0x3f, 0x00, 0x90, 
	0x89, 0x99, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x11, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 
	0x21, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x42, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0x81, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x40, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x10, 0x3c, 0x08, 0x38, 0x22, 0x1f, 0x47, 0x10, 0xc7, 0x47, 0x38, 0x1c, 0x00, 0x00, 0x00, 0x00, 
	0x08, 0x7e, 0x10, 0x44, 0x22, 0x84, 0x48, 0x90, 0x08, 0x41, 0x44, 0x22, 0x00, 0x00, 0x00, 0x80, 
	0x08, 0xc3, 0x10, 0x44, 0x22, 0x84, 0xc8, 0x98, 0x08, 0x41, 0x04, 0x22, 0x00, 0x00, 0x00, 0x00, 
	0x04, 0xc3, 0x20, 0x44, 0x22, 0x84, 0x48, 0x95, 0x08, 0x41, 0x04, 0x22, 0x00, 0x00, 0x00, 0x80, 
	0x04, 0xff, 0x20, 0x44, 0x22, 0x84, 0x48, 0x92, 0x08, 0x41, 0x04, 0x22, 0x00, 0x00, 0x00, 0x00, 
	0x04, 0xff, 0x20, 0x7c, 0x22, 0x84, 0x48, 0x90, 0x0f, 0x41, 0x04, 0x22, 0x00, 0x00, 0x00, 0x80, 
	0x04, 0xc3, 0x20, 0x44, 0x22, 0x84, 0x48, 0x90, 0x08, 0x41, 0x04, 0x22, 0x00, 0x00, 0x00, 0x00, 
	0x04, 0xc3, 0x20, 0x44, 0x22, 0x84, 0x48, 0x90, 0x08, 0x41, 0x44, 0x22, 0x00, 0x00, 0x00, 0x80, 
	0x04, 0xc3, 0x20, 0x44, 0x1c, 0x04, 0x47, 0x90, 0x08, 0x41, 0x38, 0x1c, 0x00, 0x00, 0x00, 0x00, 
	0x08, 0xc3, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x08, 0xc3, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0xc3, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x40, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x80, 0x81, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x83, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xc0, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x20, 0x18, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x20, 0x0c, 0x08, 0x38, 0x3e, 0x0f, 0x87, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x06, 0x10, 0x44, 0x08, 0x91, 0x48, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x10, 0x03, 0x10, 0x44, 0x08, 0x91, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x88, 0x01, 0x20, 0x44, 0x08, 0x91, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xc8, 0x00, 0x20, 0x44, 0x08, 0x8f, 0x88, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xe8, 0xff, 0x23, 0x7c, 0x08, 0x85, 0x0f, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xc8, 0x00, 0x20, 0x44, 0x08, 0x89, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x88, 0x01, 0x20, 0x44, 0x08, 0x91, 0x48, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x10, 0x03, 0x10, 0x44, 0x08, 0x91, 0x88, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x06, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x20, 0x0c, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x20, 0x18, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xc0, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80}; // Aquí irá la imagen para "Modo Manual"
const unsigned char modo_automatico[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0x81, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x40, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x10, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x88, 0x99, 0x11, 0x82, 0x38, 0x1e, 0x0e, 0x10, 0xc4, 0x11, 0x89, 0x38, 0x02, 0x00, 0x00, 0x80, 
	0x88, 0x99, 0x11, 0x82, 0x44, 0x22, 0x11, 0x10, 0x24, 0x12, 0x89, 0x44, 0x02, 0x00, 0x00, 0x00, 
	0x84, 0x99, 0x21, 0xc6, 0x44, 0x22, 0x11, 0x30, 0x26, 0x12, 0x89, 0x44, 0x02, 0x00, 0x00, 0x80, 
	0x84, 0x99, 0x21, 0xaa, 0x44, 0x22, 0x11, 0x50, 0x25, 0x32, 0x89, 0x44, 0x02, 0x00, 0x00, 0x00, 
	0xc4, 0xff, 0x23, 0x92, 0x44, 0x22, 0x11, 0x90, 0x24, 0x52, 0x89, 0x44, 0x02, 0x00, 0x00, 0x80, 
	0xc4, 0xff, 0x23, 0x82, 0x44, 0x22, 0x11, 0x10, 0xe4, 0x93, 0x89, 0x7c, 0x02, 0x00, 0x00, 0x00, 
	0x84, 0x99, 0x21, 0x82, 0x44, 0x22, 0x11, 0x10, 0x24, 0x12, 0x89, 0x44, 0x02, 0x00, 0x00, 0x80, 
	0x84, 0x99, 0x21, 0x82, 0x44, 0x22, 0x11, 0x10, 0x24, 0x12, 0x89, 0x44, 0x02, 0x00, 0x00, 0x00, 
	0x88, 0x99, 0x11, 0x82, 0x38, 0x1e, 0x0e, 0x10, 0x24, 0x12, 0x71, 0x44, 0x3e, 0x00, 0x00, 0x80, 
	0x88, 0x99, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x00, 0x08, 0x00, 0x00, 0x00, 0xc0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x40, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x80, 0x81, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 
	0x02, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
	0x81, 0x81, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x41, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x21, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x11, 0x3c, 0x08, 0x78, 0xcc, 0xfc, 0x78, 0x8c, 0xf1, 0xf8, 0x31, 0x3c, 0x3c, 0x00, 0x00, 0xd0, 
	0x09, 0x7e, 0x10, 0xcc, 0xcc, 0x30, 0xcc, 0x8c, 0x99, 0x61, 0x30, 0x66, 0x66, 0x00, 0x00, 0xd0, 
	0x09, 0xc3, 0x10, 0xcc, 0xcc, 0x30, 0xcc, 0xdc, 0x99, 0x61, 0x30, 0x06, 0x66, 0x00, 0x00, 0xd0, 
	0x05, 0xc3, 0x20, 0xcc, 0xcc, 0x30, 0xcc, 0xfc, 0x99, 0x61, 0x30, 0x06, 0x66, 0x00, 0x00, 0xd0, 
	0x05, 0xff, 0x20, 0xcc, 0xcc, 0x30, 0xcc, 0xac, 0x99, 0x61, 0x30, 0x06, 0x66, 0x00, 0x00, 0x10, 
	0x05, 0xff, 0x20, 0xfc, 0xcc, 0x30, 0xcc, 0x8c, 0xf9, 0x61, 0x30, 0x06, 0x66, 0x00, 0x00, 0x90, 
	0x05, 0xc3, 0x20, 0xcc, 0xcc, 0x30, 0xcc, 0x8c, 0x99, 0x61, 0x30, 0x06, 0x66, 0x00, 0x00, 0x10, 
	0x05, 0xc3, 0x20, 0xcc, 0xcc, 0x30, 0xcc, 0x8c, 0x99, 0x61, 0x30, 0x66, 0x66, 0x00, 0x00, 0x90, 
	0x05, 0xc3, 0x20, 0xcc, 0x78, 0x30, 0x78, 0x8c, 0x99, 0x61, 0x30, 0x3c, 0x3c, 0x00, 0x00, 0x10, 
	0x09, 0xc3, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 
	0x09, 0xc3, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x11, 0xc3, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 
	0x21, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x42, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 
	0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x83, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xc0, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x20, 0x18, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x20, 0x0c, 0x08, 0x38, 0x3e, 0x0f, 0x87, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x06, 0x10, 0x44, 0x08, 0x91, 0x48, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x10, 0x03, 0x10, 0x44, 0x08, 0x91, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x88, 0x01, 0x20, 0x44, 0x08, 0x91, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xc8, 0x00, 0x20, 0x44, 0x08, 0x8f, 0x88, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xe8, 0xff, 0x23, 0x7c, 0x08, 0x85, 0x0f, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xc8, 0x00, 0x20, 0x44, 0x08, 0x89, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x88, 0x01, 0x20, 0x44, 0x08, 0x91, 0x48, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x10, 0x03, 0x10, 0x44, 0x08, 0x91, 0x88, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x06, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x20, 0x0c, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x20, 0x18, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xc0, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x83, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80}; // Aquí irá la imagen para "Modo Automático"
const unsigned char atras[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x80, 0x81, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x40, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x88, 0x99, 0x11, 0x82, 0x38, 0x1e, 0x0e, 0x10, 0xc4, 0x11, 0x89, 0x38, 0x02, 0x00, 0x00, 0x00, 
	0x88, 0x99, 0x11, 0x82, 0x44, 0x22, 0x11, 0x10, 0x24, 0x12, 0x89, 0x44, 0x02, 0x00, 0x00, 0x80, 
	0x84, 0x99, 0x21, 0xc6, 0x44, 0x22, 0x11, 0x30, 0x26, 0x12, 0x89, 0x44, 0x02, 0x00, 0x00, 0x00, 
	0x84, 0x99, 0x21, 0xaa, 0x44, 0x22, 0x11, 0x50, 0x25, 0x32, 0x89, 0x44, 0x02, 0x00, 0x00, 0x80, 
	0xc4, 0xff, 0x23, 0x92, 0x44, 0x22, 0x11, 0x90, 0x24, 0x52, 0x89, 0x44, 0x02, 0x00, 0x00, 0x00, 
	0xc4, 0xff, 0x23, 0x82, 0x44, 0x22, 0x11, 0x10, 0xe4, 0x93, 0x89, 0x7c, 0x02, 0x00, 0x00, 0x80, 
	0x84, 0x99, 0x21, 0x82, 0x44, 0x22, 0x11, 0x10, 0x24, 0x12, 0x89, 0x44, 0x02, 0x00, 0x00, 0x00, 
	0x84, 0x99, 0x21, 0x82, 0x44, 0x22, 0x11, 0x10, 0x24, 0x12, 0x89, 0x44, 0x02, 0x00, 0x00, 0x80, 
	0x88, 0x99, 0x11, 0x82, 0x38, 0x1e, 0x0e, 0x10, 0x24, 0x12, 0x71, 0x44, 0x3e, 0x00, 0x00, 0x00, 
	0x88, 0x99, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x10, 0x00, 0x08, 0x00, 0x00, 0x00, 0xc0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x40, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0x81, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x80, 0x81, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x40, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x3c, 0x08, 0x38, 0x22, 0x1f, 0x47, 0x10, 0xc7, 0x47, 0x38, 0x1c, 0x00, 0x00, 0x00, 0x80, 
	0x08, 0x7e, 0x10, 0x44, 0x22, 0x84, 0x48, 0x90, 0x08, 0x41, 0x44, 0x22, 0x00, 0x00, 0x00, 0x00, 
	0x08, 0xc3, 0x10, 0x44, 0x22, 0x84, 0xc8, 0x98, 0x08, 0x41, 0x04, 0x22, 0x00, 0x00, 0x00, 0x80, 
	0x04, 0xc3, 0x20, 0x44, 0x22, 0x84, 0x48, 0x95, 0x08, 0x41, 0x04, 0x22, 0x00, 0x00, 0x00, 0x00, 
	0x04, 0xff, 0x20, 0x44, 0x22, 0x84, 0x48, 0x92, 0x08, 0x41, 0x04, 0x22, 0x00, 0x00, 0x00, 0x80, 
	0x04, 0xff, 0x20, 0x7c, 0x22, 0x84, 0x48, 0x90, 0x0f, 0x41, 0x04, 0x22, 0x00, 0x00, 0x00, 0x00, 
	0x04, 0xc3, 0x20, 0x44, 0x22, 0x84, 0x48, 0x90, 0x08, 0x41, 0x04, 0x22, 0x00, 0x00, 0x00, 0x80, 
	0x04, 0xc3, 0x20, 0x44, 0x22, 0x84, 0x48, 0x90, 0x08, 0x41, 0x44, 0x22, 0x00, 0x00, 0x00, 0x00, 
	0x04, 0xc3, 0x20, 0x44, 0x1c, 0x04, 0x47, 0x90, 0x08, 0x41, 0x38, 0x1c, 0x00, 0x00, 0x00, 0x80, 
	0x08, 0xc3, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x08, 0xc3, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x10, 0xc3, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x40, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0x81, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 
	0x02, 0x83, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
	0xc1, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x21, 0x18, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x21, 0x0c, 0x08, 0x78, 0xfc, 0x7c, 0x78, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x11, 0x06, 0x10, 0xcc, 0x30, 0xcc, 0xcc, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x11, 0x03, 0x10, 0xcc, 0x30, 0xcc, 0xcc, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x89, 0x01, 0x20, 0xcc, 0x30, 0xcc, 0xcc, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0xc9, 0x00, 0x20, 0xcc, 0x30, 0x7c, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0xe9, 0xff, 0x23, 0xfc, 0x30, 0x3c, 0xfc, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0xc9, 0x00, 0x20, 0xcc, 0x30, 0x6c, 0xcc, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 
	0x89, 0x01, 0x20, 0xcc, 0x30, 0xcc, 0xcc, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x11, 0x03, 0x10, 0xcc, 0x30, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 
	0x11, 0x06, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x21, 0x0c, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 
	0x21, 0x18, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0xc1, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 
	0x01, 0x83, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x02, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07}; // Aquí irá la imagen para "Atrás"
const unsigned char prueba_medir_resistencia[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x01, 0x00, 0x80, 0x0f, 0x60, 0xcc, 0xcf, 0x87, 0xf1, 0x01, 0x3e, 0x7e, 0x3c, 0x00, 0x00, 0xd0, 
	0x17, 0x80, 0x86, 0x19, 0x60, 0xcc, 0xc0, 0x8c, 0x31, 0x03, 0x66, 0x06, 0x66, 0x00, 0x00, 0xd0, 
	0x37, 0xc0, 0x86, 0x19, 0xe0, 0xce, 0xc0, 0x8c, 0x31, 0x03, 0x66, 0x06, 0x06, 0x00, 0x00, 0xd0, 
	0xf7, 0xf6, 0x86, 0x19, 0xe0, 0xcf, 0xc0, 0x8c, 0x31, 0x03, 0x66, 0x06, 0x06, 0x00, 0x00, 0x10, 
	0xf7, 0xf6, 0x8e, 0x0f, 0x60, 0xcd, 0xc3, 0x8c, 0xf1, 0x01, 0x3e, 0x1e, 0x3c, 0x00, 0x00, 0x90, 
	0xf7, 0xf6, 0x86, 0x01, 0x60, 0xcc, 0xc0, 0x8c, 0xf1, 0x00, 0x1e, 0x06, 0x60, 0x00, 0x00, 0x10, 
	0x37, 0xc0, 0x86, 0x01, 0x60, 0xcc, 0xc0, 0x8c, 0xb1, 0x01, 0x36, 0x06, 0x60, 0x00, 0x00, 0x90, 
	0x17, 0x80, 0x86, 0x01, 0x60, 0xcc, 0xc0, 0x8c, 0x31, 0x03, 0x66, 0x06, 0x66, 0x00, 0x00, 0x10, 
	0x01, 0x00, 0x80, 0x01, 0x63, 0xcc, 0xcf, 0x87, 0x31, 0x03, 0x66, 0x7e, 0x3c, 0x00, 0x00, 0x90, 
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x40, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xc0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x80, 0x07, 0x08, 0x04, 0x3e, 0x11, 0xc7, 0xc3, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x01, 0x80, 0x08, 0x08, 0x04, 0x02, 0x91, 0x48, 0x24, 0x02, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x80, 0x08, 0x08, 0x04, 0x02, 0x91, 0x48, 0x24, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xf0, 0x3f, 0x80, 0x08, 0x08, 0x04, 0x02, 0x93, 0x48, 0x24, 0x02, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x10, 0x21, 0x80, 0x07, 0x08, 0x04, 0x0e, 0x95, 0x48, 0x24, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x38, 0x80, 0x00, 0x08, 0x04, 0x02, 0x99, 0x4f, 0x24, 0x02, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x10, 0x21, 0x80, 0x00, 0x08, 0x04, 0x02, 0x91, 0x48, 0x24, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x38, 0x80, 0x00, 0x08, 0x04, 0x02, 0x91, 0x48, 0x24, 0x02, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x10, 0x21, 0x80, 0x80, 0xf8, 0x7c, 0x3e, 0x91, 0xc8, 0xc3, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x10, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x10, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x2c, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xac, 0xff, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xa0, 0xff, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xac, 0xff, 0x35, 0x0f, 0xe0, 0x70, 0x7c, 0x3e, 0x0e, 0xf0, 0x89, 0x38, 0x1c, 0x0e, 0x00, 0x80, 
	0xac, 0xf7, 0x35, 0x11, 0x10, 0x89, 0x10, 0x02, 0x11, 0x10, 0x88, 0x44, 0x22, 0x11, 0x00, 0x00, 
	0xa0, 0xef, 0x05, 0x11, 0x10, 0x88, 0x10, 0x02, 0x11, 0x10, 0x88, 0x04, 0x22, 0x01, 0x00, 0x80, 
	0xac, 0xcf, 0x35, 0x11, 0x10, 0x88, 0x10, 0x02, 0x11, 0x10, 0x88, 0x04, 0x22, 0x01, 0x00, 0x00, 
	0x2c, 0x10, 0x34, 0x0f, 0x90, 0x89, 0x10, 0x0e, 0x11, 0x70, 0x88, 0x64, 0x22, 0x0e, 0x00, 0x80, 
	0x00, 0x20, 0x00, 0x01, 0x10, 0x89, 0x10, 0x02, 0x11, 0x10, 0x88, 0x44, 0x3e, 0x10, 0x00, 0x00, 
	0x00, 0x10, 0x00, 0x01, 0x10, 0x89, 0x10, 0x02, 0x11, 0x10, 0x88, 0x44, 0x22, 0x10, 0x00, 0x80, 
	0x00, 0x20, 0x00, 0x01, 0x10, 0x89, 0x10, 0x02, 0x11, 0x10, 0x88, 0x44, 0x22, 0x11, 0x00, 0x00, 
	0x00, 0x10, 0x00, 0x01, 0xe1, 0x71, 0x10, 0x3e, 0x0e, 0x10, 0x70, 0x78, 0x22, 0x0e, 0x00, 0x80, 
	0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0xfe, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x80, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80}; // Aquí irá la imagen para "Prueba Medir Resistencia"
const unsigned char prueba_de_llenado[] PROGMEM = {	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x80, 0x07, 0x08, 0xf2, 0x79, 0x88, 0x07, 0x78, 0x7c, 0x1c, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x80, 0x08, 0x08, 0x12, 0x88, 0x88, 0x08, 0x88, 0x04, 0x22, 0x00, 0x00, 0x00, 0x80, 
	0x16, 0x80, 0x86, 0x08, 0x18, 0x13, 0x88, 0x88, 0x08, 0x88, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 
	0x36, 0xc0, 0x86, 0x08, 0xa8, 0x12, 0x88, 0x88, 0x08, 0x88, 0x04, 0x02, 0x00, 0x00, 0x00, 0x80, 
	0xf6, 0xf6, 0x86, 0x07, 0x48, 0x72, 0x88, 0x88, 0x07, 0x78, 0x1c, 0x1c, 0x00, 0x00, 0x00, 0x00, 
	0xf7, 0xf6, 0x8e, 0x00, 0x08, 0x12, 0x88, 0x88, 0x02, 0x28, 0x04, 0x20, 0x00, 0x00, 0x00, 0x80, 
	0xf6, 0xf6, 0x86, 0x00, 0x08, 0x12, 0x88, 0x88, 0x04, 0x48, 0x04, 0x20, 0x00, 0x00, 0x00, 0x00, 
	0x36, 0xc0, 0x86, 0x00, 0x08, 0x12, 0x88, 0x88, 0x08, 0x88, 0x04, 0x22, 0x00, 0x00, 0x00, 0x80, 
	0x16, 0x80, 0x86, 0x80, 0x08, 0xf2, 0x79, 0x88, 0x08, 0x88, 0x7c, 0x1c, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 
	0x42, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
	0xc1, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x81, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x81, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x01, 0x00, 0x80, 0x0f, 0x60, 0x60, 0xe0, 0x67, 0xc6, 0xe3, 0xc3, 0x03, 0x00, 0x00, 0x00, 0xd0, 
	0xf1, 0x3f, 0x80, 0x19, 0x60, 0x60, 0x60, 0x60, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0xd0, 
	0x11, 0x21, 0x80, 0x19, 0x60, 0x60, 0x60, 0x60, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x10, 
	0x11, 0x38, 0x80, 0x19, 0x60, 0x60, 0x60, 0xe0, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x90, 
	0x11, 0x21, 0x80, 0x0f, 0x60, 0x60, 0xe0, 0xe1, 0x67, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x10, 
	0x11, 0x38, 0x80, 0x01, 0x60, 0x60, 0x60, 0x60, 0xe7, 0x67, 0x66, 0x06, 0x00, 0x00, 0x00, 0x90, 
	0x11, 0x21, 0x80, 0x01, 0x60, 0x60, 0x60, 0x60, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x10, 
	0x11, 0x39, 0x80, 0x01, 0x60, 0x60, 0x60, 0x60, 0x66, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x90, 
	0x11, 0x20, 0x80, 0x01, 0xe3, 0xe7, 0xe7, 0x67, 0x66, 0xe6, 0xc3, 0x03, 0x00, 0x00, 0x00, 0x10, 
	0x11, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 
	0x11, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0xf2, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x2c, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xac, 0xff, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xa0, 0xff, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xac, 0xff, 0x35, 0x0f, 0xe0, 0x70, 0x7c, 0x3e, 0x0e, 0xf0, 0x89, 0x38, 0x1c, 0x0e, 0x00, 0x80, 
	0xac, 0xf7, 0x35, 0x11, 0x10, 0x89, 0x10, 0x02, 0x11, 0x10, 0x88, 0x44, 0x22, 0x11, 0x00, 0x00, 
	0xa0, 0xef, 0x05, 0x11, 0x10, 0x88, 0x10, 0x02, 0x11, 0x10, 0x88, 0x04, 0x22, 0x01, 0x00, 0x80, 
	0xac, 0xcf, 0x35, 0x11, 0x10, 0x88, 0x10, 0x02, 0x11, 0x10, 0x88, 0x04, 0x22, 0x01, 0x00, 0x00, 
	0x2c, 0x10, 0x34, 0x0f, 0x90, 0x89, 0x10, 0x0e, 0x11, 0x70, 0x88, 0x64, 0x22, 0x0e, 0x00, 0x80, 
	0x00, 0x20, 0x00, 0x01, 0x10, 0x89, 0x10, 0x02, 0x11, 0x10, 0x88, 0x44, 0x3e, 0x10, 0x00, 0x00, 
	0x00, 0x10, 0x00, 0x01, 0x10, 0x89, 0x10, 0x02, 0x11, 0x10, 0x88, 0x44, 0x22, 0x10, 0x00, 0x80, 
	0x00, 0x20, 0x00, 0x01, 0x10, 0x89, 0x10, 0x02, 0x11, 0x10, 0x88, 0x44, 0x22, 0x11, 0x00, 0x00, 
	0x00, 0x10, 0x00, 0x01, 0xe1, 0x71, 0x10, 0x3e, 0x0e, 0x10, 0x70, 0x78, 0x22, 0x0e, 0x00, 0x80, 
	0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0xfe, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x80, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80}; // Aquí irá la imagen para "Prueba de Llenado"
const unsigned char prueba_de_goteo[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x80, 0x07, 0x08, 0xf2, 0x79, 0x88, 0x07, 0x78, 0x7c, 0x1c, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x80, 0x08, 0x08, 0x12, 0x88, 0x88, 0x08, 0x88, 0x04, 0x22, 0x00, 0x00, 0x00, 0x80, 
	0x16, 0x80, 0x86, 0x08, 0x18, 0x13, 0x88, 0x88, 0x08, 0x88, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 
	0x36, 0xc0, 0x86, 0x08, 0xa8, 0x12, 0x88, 0x88, 0x08, 0x88, 0x04, 0x02, 0x00, 0x00, 0x00, 0x80, 
	0xf6, 0xf6, 0x86, 0x07, 0x48, 0x72, 0x88, 0x88, 0x07, 0x78, 0x1c, 0x1c, 0x00, 0x00, 0x00, 0x00, 
	0xf7, 0xf6, 0x8e, 0x00, 0x08, 0x12, 0x88, 0x88, 0x02, 0x28, 0x04, 0x20, 0x00, 0x00, 0x00, 0x80, 
	0xf6, 0xf6, 0x86, 0x00, 0x08, 0x12, 0x88, 0x88, 0x04, 0x48, 0x04, 0x20, 0x00, 0x00, 0x00, 0x00, 
	0x36, 0xc0, 0x86, 0x00, 0x08, 0x12, 0x88, 0x88, 0x08, 0x88, 0x04, 0x22, 0x00, 0x00, 0x00, 0x80, 
	0x16, 0x80, 0x86, 0x80, 0x08, 0xf2, 0x79, 0x88, 0x08, 0x88, 0x7c, 0x1c, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x40, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xc0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x80, 0x07, 0x08, 0x04, 0x3e, 0x11, 0xc7, 0xc3, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xf0, 0x3f, 0x80, 0x08, 0x08, 0x04, 0x02, 0x91, 0x48, 0x24, 0x02, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x10, 0x21, 0x80, 0x08, 0x08, 0x04, 0x02, 0x91, 0x48, 0x24, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x38, 0x80, 0x08, 0x08, 0x04, 0x02, 0x93, 0x48, 0x24, 0x02, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x10, 0x21, 0x80, 0x07, 0x08, 0x04, 0x0e, 0x95, 0x48, 0x24, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x38, 0x80, 0x00, 0x08, 0x04, 0x02, 0x99, 0x4f, 0x24, 0x02, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x10, 0x21, 0x80, 0x00, 0x08, 0x04, 0x02, 0x91, 0x48, 0x24, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x39, 0x80, 0x00, 0x08, 0x04, 0x02, 0x91, 0x48, 0x24, 0x02, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x10, 0x20, 0x80, 0x80, 0xf8, 0x7c, 0x3e, 0x91, 0xc8, 0xc3, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x10, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x2d, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0xad, 0xff, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0xa1, 0xff, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0xad, 0xff, 0x35, 0x1f, 0x80, 0x87, 0xc7, 0xcf, 0x8f, 0x07, 0xf8, 0x99, 0xf1, 0xf0, 0xf0, 0xd0, 
	0xad, 0xf7, 0x35, 0x33, 0xc0, 0xcc, 0x0c, 0xc3, 0xc0, 0x0c, 0x18, 0x98, 0x99, 0x99, 0x99, 0xd1, 
	0xa1, 0xef, 0x05, 0x33, 0xc0, 0xc0, 0x0c, 0xc3, 0xc0, 0x0c, 0x18, 0x98, 0x19, 0x98, 0x19, 0xd0, 
	0xad, 0xcf, 0x35, 0x33, 0xc0, 0xc0, 0x0c, 0xc3, 0xc0, 0x0c, 0x18, 0x98, 0x19, 0x98, 0x19, 0x10, 
	0x2d, 0x10, 0x34, 0x1f, 0xc0, 0xce, 0x0c, 0xc3, 0xc3, 0x0c, 0x78, 0x98, 0xd9, 0x99, 0xf1, 0x90, 
	0x01, 0x20, 0x00, 0x03, 0xc0, 0xcc, 0x0c, 0xc3, 0xc0, 0x0c, 0x18, 0x98, 0x99, 0xf9, 0x81, 0x11, 
	0x01, 0x10, 0x00, 0x03, 0xc0, 0xcc, 0x0c, 0xc3, 0xc0, 0x0c, 0x18, 0x98, 0x99, 0x99, 0x81, 0x91, 
	0x01, 0x20, 0x00, 0x03, 0xc0, 0xcc, 0x0c, 0xc3, 0xc0, 0x0c, 0x18, 0x98, 0x99, 0x99, 0x99, 0x11, 
	0x01, 0x10, 0x00, 0x03, 0x86, 0x8f, 0x07, 0xc3, 0x8f, 0x07, 0x18, 0xf0, 0xf0, 0x99, 0xf1, 0x90, 
	0x01, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x01, 0xfe, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x90, 
	0x81, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87}; // Aquí irá la imagen para "Prueba de Goteo"
const unsigned char prueba_medir_clic[] PROGMEM = {	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x01, 0x07, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x81, 0x45, 0x84, 0x0f, 0x60, 0xcc, 0xcf, 0x87, 0xf1, 0x01, 0x3c, 0x06, 0x0c, 0x0f, 0x00, 0xd0, 
	0xf9, 0x86, 0x88, 0x19, 0x60, 0xcc, 0xc0, 0x8c, 0x31, 0x03, 0x66, 0x06, 0x8c, 0x19, 0x00, 0xd0, 
	0x19, 0x17, 0x89, 0x19, 0xe0, 0xce, 0xc0, 0x8c, 0x31, 0x03, 0x06, 0x06, 0x8c, 0x01, 0x00, 0xd0, 
	0xf9, 0x27, 0x89, 0x19, 0xe0, 0xcf, 0xc0, 0x8c, 0x31, 0x03, 0x06, 0x06, 0x8c, 0x01, 0x00, 0x10, 
	0xf9, 0x27, 0x89, 0x0f, 0x60, 0xcd, 0xc3, 0x8c, 0xf1, 0x01, 0x06, 0x06, 0x8c, 0x01, 0x00, 0x90, 
	0xf9, 0x27, 0x89, 0x01, 0x60, 0xcc, 0xc0, 0x8c, 0xf1, 0x00, 0x06, 0x06, 0x8c, 0x01, 0x00, 0x10, 
	0xf9, 0x17, 0x89, 0x01, 0x60, 0xcc, 0xc0, 0x8c, 0xb1, 0x01, 0x06, 0x06, 0x8c, 0x01, 0x00, 0x90, 
	0xf9, 0x87, 0x88, 0x01, 0x60, 0xcc, 0xc0, 0x8c, 0x31, 0x03, 0x66, 0x06, 0x8c, 0x19, 0x00, 0x10, 
	0x81, 0x47, 0x88, 0x01, 0x63, 0xcc, 0xcf, 0x87, 0x31, 0x03, 0x3c, 0x7e, 0x0c, 0x0f, 0x00, 0x90, 
	0x01, 0x07, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x01, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 
	0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xf0, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x80, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x80, 0x2a, 0x80, 0x07, 0x70, 0x3c, 0x1c, 0x11, 0xe1, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0x3f, 0x80, 0x08, 0x88, 0x44, 0x22, 0x11, 0x11, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x11, 0x80, 0x08, 0x88, 0x44, 0x22, 0x11, 0x11, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x11, 0x80, 0x08, 0x88, 0x44, 0x22, 0x13, 0x11, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x1f, 0x80, 0x07, 0x88, 0x3c, 0x22, 0x15, 0x11, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x0e, 0x80, 0x00, 0xf8, 0x44, 0x3e, 0x19, 0x11, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x0e, 0x80, 0x00, 0x88, 0x44, 0x22, 0x11, 0x11, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x15, 0x80, 0x00, 0x88, 0x44, 0x22, 0x11, 0x11, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x80, 0x2a, 0x80, 0x80, 0x88, 0x3c, 0x22, 0x11, 0xe1, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x40, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xa0, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x50, 0x55, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xa8, 0xaa, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x54, 0x55, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xaa, 0xaa, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xc0, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x70, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x90, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x88, 0x99, 0x00, 0x8f, 0x8f, 0x23, 0x12, 0xf8, 0x38, 0x1e, 0x0e, 0x07, 0x00, 0x00, 0x00, 0x80, 
	0x08, 0x98, 0x00, 0x91, 0x40, 0x24, 0x12, 0x20, 0x44, 0x22, 0x91, 0x08, 0x00, 0x00, 0x00, 0x00, 
	0x08, 0x9e, 0x00, 0x91, 0x40, 0x20, 0x12, 0x20, 0x44, 0x22, 0x91, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x08, 0x86, 0x00, 0x91, 0x40, 0x20, 0x12, 0x20, 0x44, 0x22, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x08, 0x86, 0x00, 0x8f, 0x83, 0x23, 0x12, 0x20, 0x44, 0x22, 0x11, 0x07, 0x00, 0x00, 0x00, 0x80, 
	0x10, 0x40, 0x00, 0x85, 0x00, 0x24, 0x12, 0x20, 0x7c, 0x22, 0x11, 0x08, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x66, 0x00, 0x89, 0x00, 0x24, 0x12, 0x20, 0x44, 0x22, 0x11, 0x08, 0x00, 0x00, 0x00, 0x80, 
	0x70, 0xf0, 0x00, 0x91, 0x40, 0x24, 0x12, 0x20, 0x44, 0x22, 0x91, 0x08, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0xcf, 0x01, 0x91, 0x8f, 0xc3, 0xf1, 0x21, 0x44, 0x1e, 0x0e, 0x07, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80}; // Aquí irá la imagen para "Prueba Medir Clic"
const unsigned char prueba_abanico[] PROGMEM = {	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x07, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x80, 0x45, 0xc4, 0x03, 0x04, 0xf9, 0x3c, 0xc4, 0x03, 0x38, 0x02, 0xc2, 0x01, 0x00, 0x00, 0x00, 
	0xf8, 0x86, 0x48, 0x04, 0x04, 0x09, 0x44, 0x44, 0x04, 0x44, 0x02, 0x22, 0x02, 0x00, 0x00, 0x80, 
	0x18, 0x17, 0x49, 0x04, 0x8c, 0x09, 0x44, 0x44, 0x04, 0x04, 0x02, 0x22, 0x00, 0x00, 0x00, 0x00, 
	0xf8, 0x27, 0x49, 0x04, 0x54, 0x09, 0x44, 0x44, 0x04, 0x04, 0x02, 0x22, 0x00, 0x00, 0x00, 0x80, 
	0xf8, 0x27, 0xc9, 0x03, 0x24, 0x39, 0x44, 0xc4, 0x03, 0x04, 0x02, 0x22, 0x00, 0x00, 0x00, 0x00, 
	0xf8, 0x27, 0x49, 0x00, 0x04, 0x09, 0x44, 0x44, 0x01, 0x04, 0x02, 0x22, 0x00, 0x00, 0x00, 0x80, 
	0xf8, 0x17, 0x49, 0x00, 0x04, 0x09, 0x44, 0x44, 0x02, 0x04, 0x02, 0x22, 0x00, 0x00, 0x00, 0x00, 
	0xf8, 0x87, 0x48, 0x00, 0x04, 0x09, 0x44, 0x44, 0x04, 0x44, 0x02, 0x22, 0x02, 0x00, 0x00, 0x80, 
	0x80, 0x47, 0x48, 0x40, 0x04, 0xf9, 0x3c, 0x44, 0x04, 0x38, 0x3e, 0xc2, 0x01, 0x00, 0x00, 0x00, 
	0x00, 0x07, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 
	0x12, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
	0xf1, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x81, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x81, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x81, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x81, 0x2a, 0x80, 0x0f, 0xc0, 0xe3, 0xc3, 0x63, 0xc6, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x81, 0x3f, 0x80, 0x19, 0x60, 0x66, 0x66, 0x66, 0xc6, 0x98, 0x99, 0x01, 0x00, 0x00, 0x00, 0xd0, 
	0x01, 0x11, 0x80, 0x19, 0x60, 0x66, 0x66, 0x66, 0xc6, 0x18, 0x98, 0x01, 0x00, 0x00, 0x00, 0xd0, 
	0x01, 0x11, 0x80, 0x19, 0x60, 0x66, 0x66, 0xe6, 0xc6, 0x18, 0x98, 0x01, 0x00, 0x00, 0x00, 0x10, 
	0x01, 0x1f, 0x80, 0x0f, 0x60, 0xe6, 0x63, 0xe6, 0xc7, 0x18, 0x98, 0x01, 0x00, 0x00, 0x00, 0x90, 
	0x01, 0x0e, 0x80, 0x01, 0xe0, 0x67, 0xe6, 0x67, 0xc7, 0x18, 0x98, 0x01, 0x00, 0x00, 0x00, 0x10, 
	0x01, 0x0e, 0x80, 0x01, 0x60, 0x66, 0x66, 0x66, 0xc6, 0x18, 0x98, 0x01, 0x00, 0x00, 0x00, 0x90, 
	0x01, 0x15, 0x80, 0x01, 0x60, 0x66, 0x66, 0x66, 0xc6, 0x98, 0x99, 0x01, 0x00, 0x00, 0x00, 0x10, 
	0x81, 0x2a, 0x80, 0x01, 0x63, 0xe6, 0x63, 0x66, 0xc6, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x90, 
	0x41, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0xa1, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 
	0x51, 0x55, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0xaa, 0xaa, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xc0, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x70, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x10, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x90, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x88, 0x99, 0x00, 0x8f, 0x8f, 0x23, 0x12, 0xf8, 0x38, 0x1e, 0x0e, 0x07, 0x00, 0x00, 0x00, 0x00, 
	0x08, 0x98, 0x00, 0x91, 0x40, 0x24, 0x12, 0x20, 0x44, 0x22, 0x91, 0x08, 0x00, 0x00, 0x00, 0x80, 
	0x08, 0x9e, 0x00, 0x91, 0x40, 0x20, 0x12, 0x20, 0x44, 0x22, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x08, 0x86, 0x00, 0x91, 0x40, 0x20, 0x12, 0x20, 0x44, 0x22, 0x91, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x08, 0x86, 0x00, 0x8f, 0x83, 0x23, 0x12, 0x20, 0x44, 0x22, 0x11, 0x07, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x40, 0x00, 0x85, 0x00, 0x24, 0x12, 0x20, 0x7c, 0x22, 0x11, 0x08, 0x00, 0x00, 0x00, 0x80, 
	0x10, 0x66, 0x00, 0x89, 0x00, 0x24, 0x12, 0x20, 0x44, 0x22, 0x11, 0x08, 0x00, 0x00, 0x00, 0x00, 
	0x70, 0xf0, 0x00, 0x91, 0x40, 0x24, 0x12, 0x20, 0x44, 0x22, 0x91, 0x08, 0x00, 0x00, 0x00, 0x80, 
	0x80, 0xcf, 0x01, 0x91, 0x8f, 0xc3, 0xf1, 0x21, 0x44, 0x1e, 0x0e, 0x07, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; // Aquí irá la imagen para "Prueba Abanico"
const unsigned char resultados[] PROGMEM = {	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x07, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0x45, 0xc4, 0x03, 0x04, 0xf9, 0x3c, 0xc4, 0x03, 0x38, 0x02, 0xc2, 0x01, 0x00, 0x00, 0x80, 
	0xf8, 0x86, 0x48, 0x04, 0x04, 0x09, 0x44, 0x44, 0x04, 0x44, 0x02, 0x22, 0x02, 0x00, 0x00, 0x00, 
	0x18, 0x17, 0x49, 0x04, 0x8c, 0x09, 0x44, 0x44, 0x04, 0x04, 0x02, 0x22, 0x00, 0x00, 0x00, 0x80, 
	0xf8, 0x27, 0x49, 0x04, 0x54, 0x09, 0x44, 0x44, 0x04, 0x04, 0x02, 0x22, 0x00, 0x00, 0x00, 0x00, 
	0xf8, 0x27, 0xc9, 0x03, 0x24, 0x39, 0x44, 0xc4, 0x03, 0x04, 0x02, 0x22, 0x00, 0x00, 0x00, 0x80, 
	0xf8, 0x27, 0x49, 0x00, 0x04, 0x09, 0x44, 0x44, 0x01, 0x04, 0x02, 0x22, 0x00, 0x00, 0x00, 0x00, 
	0xf8, 0x17, 0x49, 0x00, 0x04, 0x09, 0x44, 0x44, 0x02, 0x04, 0x02, 0x22, 0x00, 0x00, 0x00, 0x80, 
	0xf8, 0x87, 0x48, 0x00, 0x04, 0x09, 0x44, 0x44, 0x04, 0x44, 0x02, 0x22, 0x02, 0x00, 0x00, 0x00, 
	0x80, 0x47, 0x48, 0x40, 0x04, 0xf9, 0x3c, 0x44, 0x04, 0x38, 0x3e, 0xc2, 0x01, 0x00, 0x00, 0x80, 
	0x00, 0x07, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xf0, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x80, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x80, 0x2a, 0xc0, 0x03, 0x38, 0x1e, 0x8e, 0x88, 0x70, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0x3f, 0x40, 0x04, 0x44, 0x22, 0x91, 0x88, 0x88, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x11, 0x40, 0x04, 0x44, 0x22, 0x91, 0x88, 0x08, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x11, 0x40, 0x04, 0x44, 0x22, 0x91, 0x89, 0x08, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x1f, 0xc0, 0x03, 0x44, 0x1e, 0x91, 0x8a, 0x08, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x0e, 0x40, 0x00, 0x7c, 0x22, 0x9f, 0x8c, 0x08, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x0e, 0x40, 0x00, 0x44, 0x22, 0x91, 0x88, 0x08, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x15, 0x40, 0x00, 0x44, 0x22, 0x91, 0x88, 0x88, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x80, 0x2a, 0x40, 0x40, 0x44, 0x1e, 0x91, 0x88, 0x70, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x40, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xa0, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x50, 0x55, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xa8, 0xaa, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x54, 0x55, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xaa, 0xaa, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
	0xc1, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x71, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x11, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x91, 0x5f, 0xc0, 0xc7, 0x8f, 0xc7, 0xcc, 0xc0, 0x8f, 0xc7, 0x87, 0x87, 0x07, 0x00, 0x00, 0xd0, 
	0x89, 0x99, 0xc0, 0xcc, 0xc0, 0xcc, 0xcc, 0x00, 0xc3, 0xcc, 0xcc, 0xcc, 0x0c, 0x00, 0x00, 0xd0, 
	0x09, 0x98, 0xc0, 0xcc, 0xc0, 0xc0, 0xcc, 0x00, 0xc3, 0xcc, 0xcc, 0xcc, 0x00, 0x00, 0x00, 0xd0, 
	0x09, 0x9e, 0xc0, 0xcc, 0xc0, 0xc0, 0xcc, 0x00, 0xc3, 0xcc, 0xcc, 0xcc, 0x00, 0x00, 0x00, 0xd0, 
	0x09, 0x86, 0xc0, 0xc7, 0x83, 0xc7, 0xcc, 0x00, 0xc3, 0xcc, 0xcc, 0x8c, 0x07, 0x00, 0x00, 0x10, 
	0x09, 0x86, 0xc0, 0xc3, 0x00, 0xcc, 0xcc, 0x00, 0xc3, 0xcf, 0xcc, 0x0c, 0x0c, 0x00, 0x00, 0x90, 
	0x11, 0x40, 0xc0, 0xc6, 0x00, 0xcc, 0xcc, 0x00, 0xc3, 0xcc, 0xcc, 0x0c, 0x0c, 0x00, 0x00, 0x10, 
	0x11, 0x66, 0xc0, 0xcc, 0xc0, 0xcc, 0xcc, 0x00, 0xc3, 0xcc, 0xcc, 0xcc, 0x0c, 0x00, 0x00, 0x90, 
	0x71, 0xf0, 0xc0, 0xcc, 0x8f, 0x87, 0xc7, 0x0f, 0xc3, 0xcc, 0x87, 0x87, 0x07, 0x00, 0x00, 0x10, 
	0x81, 0xcf, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 
	0x01, 0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x01, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 
	0x01, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x02, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87}; // Aquí irá la imagen para "Resultados"
const unsigned char devolver[] PROGMEM = {	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 
	0xc2, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
	0x31, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x09, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x09, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x85, 0x01, 0xc4, 0xe3, 0xe7, 0xc3, 0xc3, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0xc5, 0x00, 0x64, 0x86, 0x61, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x63, 0x00, 0x68, 0x86, 0x61, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x33, 0x00, 0x68, 0x86, 0x61, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0xfb, 0xff, 0x68, 0x86, 0xe1, 0x63, 0xc6, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x33, 0x00, 0xe8, 0x87, 0xe1, 0xe1, 0x07, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 
	0x63, 0x00, 0x68, 0x86, 0x61, 0x63, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0xc5, 0x00, 0x64, 0x86, 0x61, 0x66, 0x66, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 
	0x85, 0x01, 0x64, 0x86, 0x61, 0x66, 0xc6, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x09, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 
	0x09, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x31, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 
	0xc1, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x02, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; // Aquí irá la imagen para "Devolver"
const unsigned char VER_CARACT [] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x60, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x90, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x90, 0x0f, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x88, 0x1f, 0x08, 0x38, 0x84, 0x23, 0x22, 0x3e, 0x91, 0xcf, 0x07, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x88, 0x7f, 0x08, 0x44, 0x44, 0x24, 0x22, 0x02, 0x11, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x84, 0xff, 0x10, 0x04, 0x44, 0x20, 0x22, 0x02, 0x11, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x84, 0xff, 0x11, 0x04, 0x44, 0x20, 0x22, 0x02, 0x13, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x84, 0xff, 0x13, 0x38, 0x44, 0x26, 0x22, 0x0e, 0x15, 0xc2, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x84, 0xff, 0x11, 0x40, 0x44, 0x24, 0x22, 0x02, 0x19, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x84, 0xff, 0x10, 0x40, 0x44, 0x24, 0x22, 0x02, 0x11, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x88, 0x7f, 0x08, 0x44, 0x44, 0x24, 0x22, 0x02, 0x11, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x88, 0x3f, 0x08, 0x38, 0x84, 0xc7, 0x21, 0x3e, 0x11, 0xc2, 0x07, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x90, 0x0f, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x90, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x60, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
	0xc1, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x71, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x11, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x91, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x89, 0x99, 0x00, 0xcc, 0xfc, 0x7c, 0x00, 0x0f, 0x8f, 0x0f, 0x0f, 0x8f, 0x1f, 0x00, 0x00, 0xd0, 
	0x09, 0x98, 0x00, 0xcc, 0x0c, 0xcc, 0x80, 0x99, 0x99, 0x99, 0x99, 0x19, 0x06, 0x00, 0x00, 0xd0, 
	0x09, 0x9e, 0x00, 0xcc, 0x0c, 0xcc, 0x80, 0x81, 0x99, 0x99, 0x99, 0x01, 0x06, 0x00, 0x00, 0xd0, 
	0x09, 0x86, 0x00, 0xcc, 0x0c, 0xcc, 0x80, 0x81, 0x99, 0x99, 0x99, 0x01, 0x06, 0x00, 0x00, 0x10, 
	0x09, 0x86, 0x00, 0xcc, 0x3c, 0x7c, 0x80, 0x81, 0x99, 0x8f, 0x99, 0x01, 0x06, 0x00, 0x00, 0x90, 
	0x11, 0x40, 0x00, 0xcc, 0x0c, 0x3c, 0x80, 0x81, 0x9f, 0x87, 0x9f, 0x01, 0x06, 0x00, 0x00, 0x10, 
	0x11, 0x66, 0x00, 0xcc, 0x0c, 0x6c, 0x80, 0x81, 0x99, 0x8d, 0x99, 0x01, 0x06, 0x00, 0x00, 0x90, 
	0x71, 0xf0, 0x00, 0x78, 0x0c, 0xcc, 0x80, 0x99, 0x99, 0x99, 0x99, 0x19, 0x06, 0x00, 0x00, 0x10, 
	0x81, 0xcf, 0x01, 0x30, 0xfc, 0xcc, 0x00, 0x8f, 0x99, 0x99, 0x19, 0x0f, 0x06, 0x00, 0x00, 0x90, 
	0x01, 0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x01, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 
	0x01, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x02, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x80, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x60, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x10, 0x0c, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x06, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x08, 0x03, 0x08, 0x70, 0x7c, 0x1e, 0x0e, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x88, 0x01, 0x08, 0x88, 0x10, 0x22, 0x91, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xc4, 0x00, 0x10, 0x88, 0x10, 0x22, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x64, 0x00, 0x10, 0x88, 0x10, 0x22, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xf4, 0xff, 0x11, 0x88, 0x10, 0x1e, 0x11, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x64, 0x00, 0x10, 0xf8, 0x10, 0x0a, 0x1f, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xc4, 0x00, 0x10, 0x88, 0x10, 0x12, 0x11, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x88, 0x01, 0x08, 0x88, 0x10, 0x22, 0x91, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x08, 0x03, 0x08, 0x88, 0x10, 0x22, 0x11, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x06, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x10, 0x0c, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x60, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x80, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80};
const unsigned char SIGUIENTEFUNCIONAMIENTO [] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 
	0x02, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
	0x81, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x61, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x91, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x91, 0x0f, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x89, 0x1f, 0x08, 0x78, 0x18, 0x1e, 0x33, 0xc6, 0xcf, 0xcc, 0xcf, 0x0f, 0x00, 0x00, 0x00, 0xd0, 
	0x89, 0x7f, 0x08, 0xcc, 0x18, 0x33, 0x33, 0xc6, 0xc0, 0x0c, 0xc3, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x85, 0xff, 0x10, 0x0c, 0x18, 0x03, 0x33, 0xc6, 0xc0, 0x0c, 0xc3, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x85, 0xff, 0x11, 0x0c, 0x18, 0x03, 0x33, 0xc6, 0xc0, 0x0d, 0xc3, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x85, 0xff, 0x13, 0x78, 0x18, 0x3b, 0x33, 0xc6, 0xc3, 0x0f, 0xc3, 0x03, 0x00, 0x00, 0x00, 0x90, 
	0x85, 0xff, 0x11, 0xc0, 0x18, 0x33, 0x33, 0xc6, 0xc0, 0x0e, 0xc3, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x85, 0xff, 0x10, 0xc0, 0x18, 0x33, 0x33, 0xc6, 0xc0, 0x0c, 0xc3, 0x00, 0x00, 0x00, 0x00, 0x90, 
	0x89, 0x7f, 0x08, 0xcc, 0x18, 0x33, 0x33, 0xc6, 0xc0, 0x0c, 0xc3, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x89, 0x3f, 0x08, 0x78, 0x18, 0x3e, 0x1e, 0xc6, 0xcf, 0x0c, 0xc3, 0x0f, 0x00, 0x00, 0x00, 0x90, 
	0x91, 0x0f, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x91, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 
	0x61, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x82, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xc0, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x70, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x90, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x88, 0x99, 0x00, 0x44, 0x3e, 0x0f, 0xe0, 0x70, 0x3c, 0x1c, 0x8e, 0x0f, 0x00, 0x00, 0x00, 0x80, 
	0x08, 0x98, 0x00, 0x44, 0x02, 0x11, 0x10, 0x89, 0x44, 0x22, 0x11, 0x02, 0x00, 0x00, 0x00, 0x00, 
	0x08, 0x9e, 0x00, 0x44, 0x02, 0x11, 0x10, 0x88, 0x44, 0x22, 0x01, 0x02, 0x00, 0x00, 0x00, 0x80, 
	0x08, 0x86, 0x00, 0x44, 0x02, 0x11, 0x10, 0x88, 0x44, 0x22, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 
	0x08, 0x86, 0x00, 0x44, 0x0e, 0x0f, 0x10, 0x88, 0x3c, 0x22, 0x01, 0x02, 0x00, 0x00, 0x00, 0x80, 
	0x10, 0x40, 0x00, 0x44, 0x02, 0x05, 0x10, 0xf8, 0x14, 0x3e, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x66, 0x00, 0x44, 0x02, 0x09, 0x10, 0x88, 0x24, 0x22, 0x01, 0x02, 0x00, 0x00, 0x00, 0x80, 
	0x70, 0xf0, 0x00, 0x28, 0x02, 0x11, 0x10, 0x89, 0x44, 0x22, 0x11, 0x02, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0xcf, 0x01, 0x10, 0x3e, 0x11, 0xe0, 0x88, 0x44, 0x22, 0x0e, 0x02, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x07, 0x00, 0x00, 0xc0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x80, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x60, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x10, 0x0c, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x06, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x08, 0x03, 0x08, 0x70, 0x7c, 0x1e, 0x0e, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x88, 0x01, 0x08, 0x88, 0x10, 0x22, 0x91, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xc4, 0x00, 0x10, 0x88, 0x10, 0x22, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x64, 0x00, 0x10, 0x88, 0x10, 0x22, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xf4, 0xff, 0x11, 0x88, 0x10, 0x1e, 0x11, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x64, 0x00, 0x10, 0xf8, 0x10, 0x0a, 0x1f, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xc4, 0x00, 0x10, 0x88, 0x10, 0x12, 0x11, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x88, 0x01, 0x08, 0x88, 0x10, 0x22, 0x91, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x08, 0x03, 0x08, 0x88, 0x10, 0x22, 0x11, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x06, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x10, 0x0c, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x60, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x80, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80
};
const unsigned char ATRASMENU [] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x80, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x60, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x90, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x90, 0x0f, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x88, 0x1f, 0x08, 0x38, 0x84, 0x23, 0x22, 0x3e, 0x91, 0xcf, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x88, 0x7f, 0x08, 0x44, 0x44, 0x24, 0x22, 0x02, 0x11, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x84, 0xff, 0x10, 0x04, 0x44, 0x20, 0x22, 0x02, 0x11, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x84, 0xff, 0x11, 0x04, 0x44, 0x20, 0x22, 0x02, 0x13, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x84, 0xff, 0x13, 0x38, 0x44, 0x26, 0x22, 0x0e, 0x15, 0xc2, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x84, 0xff, 0x11, 0x40, 0x44, 0x24, 0x22, 0x02, 0x19, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x84, 0xff, 0x10, 0x40, 0x44, 0x24, 0x22, 0x02, 0x11, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x88, 0x7f, 0x08, 0x44, 0x44, 0x24, 0x22, 0x02, 0x11, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x88, 0x3f, 0x08, 0x38, 0x84, 0xc7, 0x21, 0x3e, 0x11, 0xc2, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x90, 0x0f, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x90, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x60, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x80, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xc0, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x70, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x10, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x90, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x88, 0x99, 0x00, 0x44, 0x3e, 0x0f, 0xe0, 0x70, 0x3c, 0x1c, 0x8e, 0x0f, 0x00, 0x00, 0x00, 0x00, 
	0x08, 0x98, 0x00, 0x44, 0x02, 0x11, 0x10, 0x89, 0x44, 0x22, 0x11, 0x02, 0x00, 0x00, 0x00, 0x80, 
	0x08, 0x9e, 0x00, 0x44, 0x02, 0x11, 0x10, 0x88, 0x44, 0x22, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 
	0x08, 0x86, 0x00, 0x44, 0x02, 0x11, 0x10, 0x88, 0x44, 0x22, 0x01, 0x02, 0x00, 0x00, 0x00, 0x80, 
	0x08, 0x86, 0x00, 0x44, 0x0e, 0x0f, 0x10, 0x88, 0x3c, 0x22, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x40, 0x00, 0x44, 0x02, 0x05, 0x10, 0xf8, 0x14, 0x3e, 0x01, 0x02, 0x00, 0x00, 0x00, 0x80, 
	0x10, 0x66, 0x00, 0x44, 0x02, 0x09, 0x10, 0x88, 0x24, 0x22, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 
	0x70, 0xf0, 0x00, 0x28, 0x02, 0x11, 0x10, 0x89, 0x44, 0x22, 0x11, 0x02, 0x00, 0x00, 0x00, 0x80, 
	0x80, 0xcf, 0x01, 0x10, 0x3e, 0x11, 0xe0, 0x88, 0x44, 0x22, 0x0e, 0x02, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x07, 0x00, 0x00, 0xc0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 
	0x02, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
	0x81, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x61, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x11, 0x0c, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x11, 0x06, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x09, 0x03, 0x08, 0x78, 0xfc, 0x7c, 0x78, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x89, 0x01, 0x08, 0xcc, 0x30, 0xcc, 0xcc, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0xc5, 0x00, 0x10, 0xcc, 0x30, 0xcc, 0xcc, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x65, 0x00, 0x10, 0xcc, 0x30, 0xcc, 0xcc, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0xf5, 0xff, 0x11, 0xcc, 0x30, 0x7c, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 
	0x65, 0x00, 0x10, 0xfc, 0x30, 0x3c, 0xfc, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0xc5, 0x00, 0x10, 0xcc, 0x30, 0x6c, 0xcc, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 
	0x89, 0x01, 0x08, 0xcc, 0x30, 0xcc, 0xcc, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x09, 0x03, 0x08, 0xcc, 0x30, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 
	0x11, 0x06, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x11, 0x0c, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 
	0x61, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x82, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07
};
const unsigned char Atrasinjectores [] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x83, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xc0, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x20, 0x3f, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x20, 0xff, 0x08, 0x18, 0x00, 0x30, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0xe3, 0x11, 0x18, 0x00, 0x00, 0x00, 0x0c, 0x80, 0x01, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x80, 
	0x10, 0x83, 0x11, 0x18, 0x1f, 0x30, 0x80, 0x8f, 0x87, 0xc1, 0xc3, 0xe3, 0xe3, 0x01, 0x00, 0x00, 
	0x08, 0x83, 0x23, 0x18, 0x33, 0x30, 0xc0, 0xcc, 0xcc, 0x67, 0x66, 0xc6, 0x30, 0x03, 0x00, 0x80, 
	0x08, 0x83, 0x23, 0x18, 0x33, 0x30, 0xc0, 0xcc, 0x8c, 0x61, 0x66, 0xc0, 0x30, 0x03, 0x00, 0x00, 
	0x08, 0x83, 0x23, 0x18, 0x33, 0x30, 0xc0, 0xcc, 0x8f, 0xe1, 0x67, 0xc0, 0x30, 0x03, 0x00, 0x80, 
	0x08, 0x83, 0x23, 0x18, 0x33, 0x30, 0xc0, 0xcc, 0x80, 0x61, 0x60, 0xc0, 0x30, 0x03, 0x00, 0x00, 
	0x08, 0x83, 0x23, 0x18, 0x33, 0x30, 0xc0, 0xcc, 0x8c, 0x61, 0x66, 0xc6, 0x30, 0x03, 0x00, 0x80, 
	0x10, 0x83, 0x13, 0x18, 0x33, 0x30, 0x86, 0x8f, 0x87, 0xc1, 0xc3, 0x83, 0xe3, 0x01, 0x00, 0x00, 
	0x10, 0xc3, 0x11, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x20, 0xff, 0x08, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x20, 0x7f, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xc0, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x83, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x80, 0x81, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x40, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x3c, 0x08, 0x08, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x80, 
	0x08, 0x7e, 0x10, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
	0x08, 0xc3, 0x10, 0x88, 0x07, 0x04, 0x38, 0x3c, 0x19, 0x87, 0xc7, 0xe1, 0x71, 0x38, 0x00, 0x80, 
	0x04, 0xc3, 0x20, 0x88, 0x08, 0x04, 0x44, 0x22, 0x85, 0x48, 0x24, 0x12, 0x89, 0x44, 0x00, 0x00, 
	0x04, 0xff, 0x20, 0x88, 0x08, 0x04, 0x40, 0x22, 0x83, 0x48, 0x04, 0x12, 0x89, 0x04, 0x00, 0x80, 
	0x04, 0xff, 0x20, 0x88, 0x08, 0x04, 0x78, 0x22, 0x81, 0x4f, 0xc4, 0x13, 0x89, 0x38, 0x00, 0x00, 
	0x04, 0xc3, 0x20, 0x88, 0x08, 0x04, 0x44, 0x22, 0x81, 0x40, 0x24, 0x12, 0x89, 0x40, 0x00, 0x80, 
	0x04, 0xc3, 0x20, 0x88, 0x08, 0x04, 0x44, 0x3c, 0x81, 0x88, 0x27, 0x12, 0x89, 0x44, 0x00, 0x00, 
	0x04, 0xc3, 0x20, 0x88, 0x08, 0x44, 0x78, 0x20, 0x01, 0x07, 0xc4, 0xe3, 0x71, 0x38, 0x00, 0x80, 
	0x08, 0xc3, 0x10, 0x00, 0x40, 0x04, 0x00, 0x22, 0x00, 0x40, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x08, 0xc3, 0x10, 0x00, 0x80, 0x03, 0x00, 0x1c, 0x00, 0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x10, 0xc3, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x40, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 
	0x82, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
	0x61, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x11, 0x0c, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x11, 0x06, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x09, 0x03, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x89, 0x01, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0xc5, 0x00, 0x10, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x65, 0x00, 0x10, 0x98, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0xf5, 0xff, 0x11, 0x98, 0xf9, 0xcc, 0x78, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x65, 0x00, 0x10, 0x98, 0x31, 0xec, 0xcc, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 
	0xc5, 0x00, 0x10, 0x98, 0x31, 0x1c, 0xc0, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x89, 0x01, 0x08, 0xf8, 0x31, 0x0c, 0xf8, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 
	0x09, 0x03, 0x08, 0x98, 0x31, 0x0c, 0xcc, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x11, 0x06, 0x04, 0x98, 0x31, 0x0c, 0xcc, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 
	0x11, 0x0c, 0x04, 0x98, 0xe1, 0x0c, 0xf8, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x61, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 
	0x81, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x02, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07
};
const unsigned char inj.agregados [] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x83, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xc0, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x20, 0x3f, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x20, 0xff, 0x08, 0x08, 0x00, 0x04, 0x40, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x10, 0xe3, 0x11, 0x08, 0x00, 0x00, 0x40, 0x00, 0x02, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x83, 0x11, 0x88, 0x07, 0x04, 0x78, 0x1c, 0x82, 0xc3, 0xf1, 0x38, 0x00, 0x00, 0x00, 0x80, 
	0x08, 0x83, 0x23, 0x88, 0x08, 0x04, 0x44, 0x22, 0x4f, 0x24, 0x22, 0x44, 0x00, 0x00, 0x00, 0x00, 
	0x08, 0x83, 0x23, 0x88, 0x08, 0x04, 0x44, 0x22, 0x42, 0x24, 0x20, 0x44, 0x00, 0x00, 0x00, 0x80, 
	0x08, 0x83, 0x23, 0x88, 0x08, 0x04, 0x44, 0x3e, 0xc2, 0x27, 0x20, 0x44, 0x00, 0x00, 0x00, 0x00, 
	0x08, 0x83, 0x23, 0x88, 0x08, 0x04, 0x44, 0x02, 0x42, 0x20, 0x20, 0x44, 0x00, 0x00, 0x00, 0x80, 
	0x08, 0x83, 0x23, 0x88, 0x08, 0x04, 0x44, 0x22, 0x42, 0x24, 0x22, 0x44, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x83, 0x13, 0x88, 0x08, 0x44, 0x78, 0x1c, 0x82, 0xc3, 0xc1, 0x38, 0x00, 0x00, 0x00, 0x80, 
	0x10, 0xc3, 0x11, 0x00, 0x40, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x20, 0xff, 0x08, 0x00, 0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x20, 0x7f, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xc0, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x83, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 
	0x02, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
	0x81, 0x81, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x41, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x21, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x11, 0x3c, 0x08, 0x18, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0xd0, 
	0x09, 0x7e, 0x10, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0xd0, 
	0x09, 0xc3, 0x10, 0x18, 0x1f, 0x30, 0x80, 0x87, 0xcf, 0x8c, 0x87, 0x8f, 0x87, 0x8f, 0x87, 0xd7, 
	0x05, 0xc3, 0x20, 0x18, 0x33, 0x30, 0xc0, 0xcc, 0xcc, 0xce, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xdc, 
	0x05, 0xff, 0x20, 0x18, 0x33, 0x30, 0x00, 0xcc, 0xcc, 0xc1, 0xcc, 0x0c, 0xcc, 0xcc, 0xcc, 0x10, 
	0x05, 0xff, 0x20, 0x18, 0x33, 0x30, 0x80, 0xcf, 0xcc, 0xc0, 0xcf, 0x8c, 0xcf, 0xcc, 0x8c, 0x97, 
	0x05, 0xc3, 0x20, 0x18, 0x33, 0x30, 0xc0, 0xcc, 0xcc, 0xc0, 0xc0, 0xcc, 0xcc, 0xcc, 0x0c, 0x1c, 
	0x05, 0xc3, 0x20, 0x18, 0x33, 0x30, 0xc0, 0x8c, 0xcf, 0xc0, 0x8c, 0xcf, 0xcc, 0xcc, 0xcc, 0x9c, 
	0x05, 0xc3, 0x20, 0x18, 0x33, 0x30, 0x86, 0x0f, 0xcc, 0x80, 0x07, 0x8c, 0x8f, 0x8f, 0x87, 0x17, 
	0x09, 0xc3, 0x10, 0x00, 0x00, 0x33, 0x00, 0xc0, 0x0c, 0x00, 0xc0, 0x0c, 0x00, 0x00, 0x00, 0x90, 
	0x09, 0xc3, 0x10, 0x00, 0x00, 0x1e, 0x00, 0x80, 0x07, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x10, 
	0x11, 0xc3, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 
	0x21, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x42, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 
	0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x60, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x0c, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x10, 0x06, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x08, 0x03, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x88, 0x01, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xc4, 0x00, 0x10, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x64, 0x00, 0x10, 0x88, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xf4, 0xff, 0x11, 0x88, 0x3c, 0x19, 0x87, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x64, 0x00, 0x10, 0x88, 0x08, 0x85, 0x48, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xc4, 0x00, 0x10, 0x88, 0x08, 0x03, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x88, 0x01, 0x08, 0xf8, 0x08, 0x01, 0x8f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x08, 0x03, 0x08, 0x88, 0x08, 0x81, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x10, 0x06, 0x04, 0x88, 0x08, 0x81, 0x48, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x0c, 0x04, 0x88, 0x30, 0x01, 0x8f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x60, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80
};
const unsigned char inj.defecto [] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 
	0x02, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
	0x01, 0x83, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0xc1, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x21, 0x3f, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x21, 0xff, 0x08, 0x18, 0x00, 0x30, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 
	0x11, 0xe3, 0x11, 0x18, 0x00, 0x00, 0x00, 0x0c, 0x80, 0x01, 0x00, 0xc0, 0x00, 0x00, 0x00, 0xd0, 
	0x11, 0x83, 0x11, 0x18, 0x1f, 0x30, 0x80, 0x8f, 0x87, 0xc1, 0xc3, 0xe3, 0xe3, 0x01, 0x00, 0xd0, 
	0x09, 0x83, 0x23, 0x18, 0x33, 0x30, 0xc0, 0xcc, 0xcc, 0x67, 0x66, 0xc6, 0x30, 0x03, 0x00, 0xd0, 
	0x09, 0x83, 0x23, 0x18, 0x33, 0x30, 0xc0, 0xcc, 0x8c, 0x61, 0x66, 0xc0, 0x30, 0x03, 0x00, 0x10, 
	0x09, 0x83, 0x23, 0x18, 0x33, 0x30, 0xc0, 0xcc, 0x8f, 0xe1, 0x67, 0xc0, 0x30, 0x03, 0x00, 0x90, 
	0x09, 0x83, 0x23, 0x18, 0x33, 0x30, 0xc0, 0xcc, 0x80, 0x61, 0x60, 0xc0, 0x30, 0x03, 0x00, 0x10, 
	0x09, 0x83, 0x23, 0x18, 0x33, 0x30, 0xc0, 0xcc, 0x8c, 0x61, 0x66, 0xc6, 0x30, 0x03, 0x00, 0x90, 
	0x11, 0x83, 0x13, 0x18, 0x33, 0x30, 0x86, 0x8f, 0x87, 0xc1, 0xc3, 0x83, 0xe3, 0x01, 0x00, 0x10, 
	0x11, 0xc3, 0x11, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 
	0x21, 0xff, 0x08, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x21, 0x7f, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 
	0xc1, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x02, 0x83, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x80, 0x81, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x40, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x3c, 0x08, 0x08, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x80, 
	0x08, 0x7e, 0x10, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
	0x08, 0xc3, 0x10, 0x88, 0x07, 0x04, 0x38, 0x3c, 0x19, 0x87, 0xc7, 0xe1, 0x71, 0x38, 0x00, 0x80, 
	0x04, 0xc3, 0x20, 0x88, 0x08, 0x04, 0x44, 0x22, 0x85, 0x48, 0x24, 0x12, 0x89, 0x44, 0x00, 0x00, 
	0x04, 0xff, 0x20, 0x88, 0x08, 0x04, 0x40, 0x22, 0x83, 0x48, 0x04, 0x12, 0x89, 0x04, 0x00, 0x80, 
	0x04, 0xff, 0x20, 0x88, 0x08, 0x04, 0x78, 0x22, 0x81, 0x4f, 0xc4, 0x13, 0x89, 0x38, 0x00, 0x00, 
	0x04, 0xc3, 0x20, 0x88, 0x08, 0x04, 0x44, 0x22, 0x81, 0x40, 0x24, 0x12, 0x89, 0x40, 0x00, 0x80, 
	0x04, 0xc3, 0x20, 0x88, 0x08, 0x04, 0x44, 0x3c, 0x81, 0x88, 0x27, 0x12, 0x89, 0x44, 0x00, 0x00, 
	0x04, 0xc3, 0x20, 0x88, 0x08, 0x44, 0x78, 0x20, 0x01, 0x07, 0xc4, 0xe3, 0x71, 0x38, 0x00, 0x80, 
	0x08, 0xc3, 0x10, 0x00, 0x40, 0x04, 0x00, 0x22, 0x00, 0x40, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x08, 0xc3, 0x10, 0x00, 0x80, 0x03, 0x00, 0x1c, 0x00, 0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x10, 0xc3, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x40, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x80, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x60, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x10, 0x0c, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x06, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x08, 0x03, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x88, 0x01, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xc4, 0x00, 0x10, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x64, 0x00, 0x10, 0x88, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xf4, 0xff, 0x11, 0x88, 0x3c, 0x19, 0x87, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x64, 0x00, 0x10, 0x88, 0x08, 0x85, 0x48, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0xc4, 0x00, 0x10, 0x88, 0x08, 0x03, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x88, 0x01, 0x08, 0xf8, 0x08, 0x01, 0x8f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x08, 0x03, 0x08, 0x88, 0x08, 0x81, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x06, 0x04, 0x88, 0x08, 0x81, 0x48, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x10, 0x0c, 0x04, 0x88, 0x30, 0x01, 0x8f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x60, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x80, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


bool resultadoss[5]; // Array que almacena el resultado de las 5 pruebas
const char* nombresPruebas[5] = {"P.MEDIRRES","P.LLENADO","P.GOTEO_FUGAS", "P.MEDIR_CLIC",   "P.ABANICO"};

// Definir los menús
 char nombresMotocicleta[20][50] = {
    "Honda CB 160F", "Yamaha FZ-S FI V3", "Suzuki Gixxer 150", 
    "Bajaj Pulsar NS160", "TVS Apache RTR 160 4V", "Honda CB 190R", 
    "Yamaha MT-15", "KTM Duke 200", "KTM Duke 250", 
    "Benelli TNT 150", "Kawasaki Z125 PRO", "BMW G 310 R"
};

const int tamanioTiposInyector = sizeof(nombresMotocicleta) / sizeof(nombresMotocicleta[0]);

const char* selecionarmoto[] = {"siguiente", "caracteristicas", "atras"};
const int tamanioselecionarmoto = sizeof(selecionarmoto) / sizeof(selecionarmoto[0]);
const char* agregarborrarinj[] = {"agregarinj", "borrarinj", "atras"};
const int tamanioagregarborrarinj = sizeof(agregarborrarinj) / sizeof(agregarborrarinj[0]);
const char* menuprincipal[] = {"prueba", "agregar injector", "ayudas"};
const int tamaniomenuprincipal = sizeof(menuprincipal) / sizeof(menuprincipal[0]);

const char* subMenuFuncionamiento[] = {"Manual", "Automatico", "Atras"};
const int tamaniosubMenuFuncionamiento = sizeof(subMenuFuncionamiento) / sizeof(subMenuFuncionamiento[0]);

// const char* subMenuPrueba[] = {"Manual", "Automatico", "Atras"};
// const int tamanioSubMenuPrueba = sizeof(subMenuPrueba) / sizeof(subMenuPrueba[0]);

const char* subMenuManual[] = {"Medir Resistencia", "Flujo", "Fugas", "Click del Inyector", "Prueba de Abanico", "Resultados", "Atras"};
const int tamanioSubMenuManual = sizeof(subMenuManual) / sizeof(subMenuManual[0]);
const int maxItems = 20; // Máximo número de elementos
 char  numerosParte[20] [50] = {
    "FJ7Z-09", "0280156014", "195500-3040", 
    "0280158028", "0280156033", "FJ8Z-10", 
    "195500-3040", "0280156014", "0280156014", 
    "FJ7Z-09", "195500-3040", "0280156014"
};

 char tiposValvula[20][50] = {
    "Aguja", "Disco", "Bola", 
    "Aguja", "Disco", "Aguja", 
    "Bola", "Disco", "Disco", 
    "Aguja", "Bola", "Disco"
};

char impedancias[20][50] = {
    "Alta (12 ohmios)", "Alta (14 ohmios)", "Baja (2.5 ohmios)", 
    "Alta (12 ohmios)", "Alta (14 ohmios)", "Alta (12 ohmios)", 
    "Baja (2.5 ohmios)", "Alta (14 ohmios)", "Alta (14 ohmios)", 
    "Alta (12 ohmios)", "Baja (2.5 ohmios)", "Alta (14 ohmios)"
};

 char angulosAtomizacion[20][50]= {
    "20°-30°", "15°-25°", "20°-30°", 
    "15°-25°", "15°-25°", "20°-30°", 
    "20°-30°", "15°-25°", "15°-25°", 
    "20°-30°", "20°-30°", "15°-25°"
};

 char caudalCombustible[20][50] = {
    "180 cc/min", "190 cc/min", "160 cc/min", 
    "210 cc/min", "200 cc/min", "190 cc/min", 
    "160 cc/min", "220 cc/min", "230 cc/min", 
    "180 cc/min", "160 cc/min", "240 cc/min"
};

 char presionOperacion[20][50] = {
    "3 bar", "3 bar", "3 bar", 
    "3 bar", "3 bar", "3 bar", 
    "3 bar", "3 bar", "3 bar", 
    "3 bar", "3 bar", "3 bar"
};

 char tiposConector[20][50] = {
    "Keihin", "Bosch", "Mikuni", 
    "Bosch", "Bosch", "Keihin", 
    "Mikuni", "Bosch", "Bosch", 
    "Keihin", "Mikuni", "Bosch"
};

String inputData = ""; // Almacena temporalmente los datos ingresados
int currentField = 0;  // Controla el campo actual en el que se ingresan datos
int currentIndex = 0;  // Índice para el nuevo dato en el arreglo
int 	estadoActuall = 0;
// Instancia del MPU6050
Adafruit_MPU6050 mpu;
sensors_event_t a, g, temp;

// Prototipos de funciones
//String leerValorTeclado();
void cargarDatosDeEEPROM();
 String leerDeEEPROM(int index);
void checkInjectorFlow();
//void mostrarDatosGuardados();
float calculateFlowRate(uint32_t pulses);
void showResults();
void detectInjectorClickk();
void requestData(const char* prompt);
void checkInjectorResistance();

void compareResistances(float baseResistance, float testResistance);
void mostrarMenu();
void manejarEstado();
void mensajeBienvenida(const char* mensaje);
void IRAM_ATTR pulseCounter(); // Necesario para las ISR en ESP32
void setupoled();
String tecladoVirtual();
void displayFlowRate();
void setupEncoder();
void displayEncoderPosition();
void pruebaDeAbanico();
void mostrarResultado();
void mostrarDatosInyector(int indice);
bool botonTecladoPresionado();

// void mostrarTecladoVirtual();
// double manejarTecladoVirtual();
// void actualizarCursorTecladoVirtual();
// void manejarSeleccionTecladoVirtual(char seleccion);
void seleccionarMotocicleta();
void menuSeleccionMotocicleta();
void mostrarCaracteristicasMotocicleta(int indice); 
bool encoderButtonPressed();
void mostrarMotocicletaSeleccionada(int indice);
void mostrarSeleccionMotocicleta(int indice);
void mostrarConfirmarMoto();
void displayField();
void guardarDato(String data);
int getFirstAvailableIndex(char arreglo[][50], int maxItems);

void guardarEnEEPROM(char arreglo[][50], int index, String data);

void solicitarYGuardarDatos();

void setup() {
    u8g2.begin();
    Serial.begin(115200);
	EEPROM.begin(512);  // Ajusta según el tamaño de tu EEPROM
//cargarDatosDeEEPROM();// Cargar los datos guardados en los arreglos desde la EEPROM
//texto_seleccionado = "";
  
//currentIndex = getFirstAvailableIndex(nombresMotocicleta, maxItems); // Buscar la primera posición disponible
   // setupoled();
    setupEncoder();
 
    mostrarMenu();
}

void loop() {
    displayEncoderPosition();
  // mostrarDatosGuardados();
 
}
// Esta función devuelve true si el botón del encoder fue presionado
bool encoderButtonPressed() {
    static unsigned long lastPressTime = 0;  // Para el control de debounce
    const unsigned long debounceDelay = 30;  // Tiempo de debounce de 50 ms
    bool buttonState = digitalRead(botonPin);  // Leer el estado del botón
    
    if (buttonState == LOW) {  // El botón del encoder está presionado (asumiendo que LOW es presionado)
        unsigned long currentTime = millis();
        if (currentTime - lastPressTime > debounceDelay) {  // Verificar que ha pasado suficiente tiempo
            lastPressTime = currentTime;
            return true;  // Botón presionado y debounce pasado
        }
    }

    return false;  // No hay acción del botón
}
void displayEncoderPosition() {
    int valorEncoder = encoder.getCount();
    
    if (millis() - lastEncoderMoveTime > encoderMoveDelay) {
        if (valorEncoder > 0) {
			 if (estadoActual == MENU_PRINCIPAL) {
                indiceMenu = (indiceMenu + 1) % tamaniomenuprincipal;
			} else if (estadoActual == SELECCIONAR_MOTO) {
                indiceseleccionarmoto = (indiceseleccionarmoto + 1) % tamanioselecionarmoto;
			} else if (estadoActual == AGREGAR_BORRAR_INJ) {
                indiceagregarborrarinjt = (indiceagregarborrarinjt + 1) % tamanioagregarborrarinj;
			}else if (estadoActual == MENU_SELECCION_INYECTOR) {
                indiceInyector = (indiceInyector + 1) % tamanioTiposInyector;
			}else if (estadoActual == SUBMENU_FUNCIONAMIENTO) {
                indicefuncionamiento = (indicefuncionamiento + 1) % tamaniosubMenuFuncionamiento;
 
            } else if (estadoActual == SUBMENU_MANUAL) {
                indiceSubSubMenu = (indiceSubSubMenu + 1) % tamanioSubMenuManual;
             } else if (estadoActual == TECLADO_VIRTUAL) {
            tecladoVirtual();
            }
            encoder.clearCount();
            mostrarMenu();
            lastEncoderMoveTime = millis();
        } else if (valorEncoder < 0) {
			 if (estadoActual == MENU_PRINCIPAL) {
                indiceMenu = (indiceMenu - 1 +  tamaniomenuprincipal) % tamaniomenuprincipal;
			} else if (estadoActual == SELECCIONAR_MOTO) {
                indiceseleccionarmoto = (indiceseleccionarmoto - 1 + tamanioselecionarmoto) % tamanioselecionarmoto;
            } else if (estadoActual == MENU_SELECCION_INYECTOR) {
                indiceInyector = (indiceInyector - 1 + tamanioTiposInyector) % tamanioTiposInyector;
			}else if (estadoActual == AGREGAR_BORRAR_INJ) {
               indiceagregarborrarinjt = (indiceagregarborrarinjt - 1 + tamanioagregarborrarinj) %  tamanioagregarborrarinj;
			}else if (estadoActual == SUBMENU_FUNCIONAMIENTO) {
                indicefuncionamiento = (indicefuncionamiento - 1 + tamaniosubMenuFuncionamiento) % tamaniosubMenuFuncionamiento;

            } else if (estadoActual == SUBMENU_MANUAL) {
                indiceSubSubMenu = (indiceSubSubMenu - 1 + tamanioSubMenuManual) % tamanioSubMenuManual;
            } else if (estadoActual == TECLADO_VIRTUAL) {
                tecladoVirtual();
            }
            encoder.clearCount();
            mostrarMenu();
            lastEncoderMoveTime = millis();
        }
    

    bool estadoBoton = digitalRead(botonPin);
    if (estadoBoton == LOW) {
        delay(50); // Debounce
        if (estadoBoton == LOW) {
            manejarEstado();
            mostrarMenu();
            delay(300); // Debounce
       		 }
		
   		 }
	}
}

void IRAM_ATTR pulseCounter() {
    pulseCount++;
}

void setupEncoder() {
    pinMode(ENCODER_PIN_A, INPUT_PULLUP);
    pinMode(ENCODER_PIN_B, INPUT_PULLUP);
    encoder.attachHalfQuad(ENCODER_PIN_A, ENCODER_PIN_B);
	encoderTeclado.attachHalfQuad(ENCODER_PIN_A, ENCODER_PIN_B);
    encoder.clearCount();
    pinMode(botonPin, INPUT_PULLUP);
	  // Inicializar encoder
   

    
}

void setupoled() {
// u8g2.begin();
}



void mostrarMenu() {
 
    switch (estadoActual) {
		case MENU_PRINCIPAL:
           if (indiceMenu == 0) {
                    u8g2.clearBuffer();
                    u8g2.drawXBMP(0, 0, 128, 64, iniciar_prueba); // Dibuja la imagen completa en pantalla
                    u8g2.sendBuffer();
            } else if (indiceMenu == 1) {
                    u8g2.clearBuffer();
                    u8g2.drawXBMP(0, 0, 128, 64, agregarborrarinjectorr); // Dibuja la imagen completa en pantalla
                    u8g2.sendBuffer();
            } else if (indiceMenu == 2) {
                    u8g2.clearBuffer();
                    u8g2.drawXBMP(0, 0, 128, 64, ayuda); // Dibuja la imagen completa en pantalla
                    u8g2.sendBuffer();
            // } else if (indiceSubSubMenu == 3) {
            //     estadoActual = MENU_PRINCIPAL;
            //     indiceSubSubMenu = 0;
            // }
		break;
		case AYUDA:
        // tecladoVirtual ();
		break;
        case MENU_SELECCION_INYECTOR:
        mostrarSeleccionMotocicleta(indiceInyector); // Mostrar las opciones de motocicleta
        break;
		case MENU_CARACTERISTICAS:
        mostrarCaracteristicasMotocicleta(indiceMotoSeleccionada); // Mostrar las características de la motocicleta seleccionada
		break;
        case MENU_CONFIRMA_MOTO:
		mostrarSeleccionMotocicleta(indiceMotoSeleccionada);
		break;


	    case AGREGAR_INJECTOR:
            // lcd.setCursor(0, 0);
            // lcd.print("Tipo de Inyector:");
            // lcd.setCursor(0, 1);
            // lcd.print(nombresMotocicleta[indiceMenu]);
        break;

		case SUBMENU_FUNCIONAMIENTO:
            if (indicefuncionamiento == 0) {
                    u8g2.clearBuffer();
                    u8g2.drawXBMP(0, 0, 128, 64, modo_manual); // Dibuja la imagen completa en pantalla
                    u8g2.sendBuffer();
            } else if (indicefuncionamiento == 1) {
                    u8g2.clearBuffer();
                    u8g2.drawXBMP(0, 0, 128, 64, modo_automatico); // Dibuja la imagen completa en pantalla
                    u8g2.sendBuffer();
            } else if (indicefuncionamiento == 2) {
                    u8g2.clearBuffer();
                    u8g2.drawXBMP(0, 0, 128, 64, atras); // Dibuja la imagen completa en pantalla
                    u8g2.sendBuffer();
            }
            break;

		
		case SUBMENU_MANUAL:
            if (indiceSubSubMenu == 0) {
                    u8g2.clearBuffer();
                    u8g2.drawXBMP(0, 0, 128, 64, prueba_medir_resistencia); // Dibuja la imagen completa en pantalla
                    u8g2.sendBuffer();
            } else if (indiceSubSubMenu == 1) {
                    u8g2.clearBuffer();
                    u8g2.drawXBMP(0, 0, 128, 64, prueba_de_llenado); // Dibuja la imagen completa en pantalla
                    u8g2.sendBuffer();
            } else if (indiceSubSubMenu == 2) {
                    u8g2.clearBuffer();
                    u8g2.drawXBMP(0, 0, 128, 64, prueba_de_goteo); // Dibuja la imagen completa en pantalla
                    u8g2.sendBuffer();
            }
              else if (indiceSubSubMenu == 3) {
                    u8g2.clearBuffer();
                    u8g2.drawXBMP(0, 0, 128, 64, prueba_medir_clic); // Dibuja la imagen completa en pantalla
                    u8g2.sendBuffer();
            } else if (indiceSubSubMenu == 4) {
                    u8g2.clearBuffer();
                    u8g2.drawXBMP(0, 0, 128, 64, prueba_abanico); // Dibuja la imagen completa en pantalla
                    u8g2.sendBuffer();
            } else if (indiceSubSubMenu == 5) {
                    u8g2.clearBuffer();
                    u8g2.drawXBMP(0, 0, 128, 64, resultados); // Dibuja la imagen completa en pantalla
                    u8g2.sendBuffer();
            } else if (indiceSubSubMenu == 6) {
                    u8g2.clearBuffer();
                    u8g2.drawXBMP(0, 0, 128, 64, devolver); // Dibuja la imagen completa en pantalla
                    u8g2.sendBuffer();
            }         
            break;
case AGREGAR_BORRAR_INJ:
            if (indiceagregarborrarinjt == 0) {
                    u8g2.clearBuffer();
                    u8g2.drawXBMP(0, 0, 128, 64, AGREGAR_INJ); // Dibuja la imagen completa en pantalla
                    u8g2.sendBuffer();
            } else if (indiceagregarborrarinjt == 1) {
                    u8g2.clearBuffer();
                    u8g2.drawXBMP(0, 0, 128, 64, BORRAR_INJ); // Dibuja la imagen completa en pantalla
                    u8g2.sendBuffer();
            } else if (indiceagregarborrarinjt == 2) {
                    u8g2.clearBuffer();
                    u8g2.drawXBMP(0, 0, 128, 64, ATRASAGREGARINJECTOR_INJ); // Dibuja la imagen completa en pantalla
                    u8g2.sendBuffer();
            }
            break;
		case SELECCIONAR_MOTO:
            if (indiceseleccionarmoto == 0) {
                    u8g2.clearBuffer();
                    u8g2.drawXBMP(0, 0, 128, 64, SIGUIENTEFUNCIONAMIENTO); // Dibuja la imagen completa en pantalla
                    u8g2.sendBuffer();
            } else if (indiceseleccionarmoto == 1) {
                    u8g2.clearBuffer();
                    u8g2.drawXBMP(0, 0, 128, 64, VER_CARACT); // Dibuja la imagen completa en pantalla
                    u8g2.sendBuffer();
            } else if (indiceseleccionarmoto == 2) {
                    u8g2.clearBuffer();
                    u8g2.drawXBMP(0, 0, 128, 64, ATRASMENU); // Dibuja la imagen completa en pantalla
                    u8g2.sendBuffer();
            }
            break;


	
            
		
    }
}
}

void manejarEstado() {
    switch (estadoActual) {
		case MENU_PRINCIPAL:
		
            if (indiceMenu == 0) {
                estadoActual = MENU_SELECCION_INYECTOR;
				
            } else if (indiceMenu == 1) {
                estadoActual = AGREGAR_BORRAR_INJ;
            } else if (indiceMenu == 2) {
                estadoActual = AYUDA;
            }
			else {
                estadoActual = MENU_PRINCIPAL;
                   }
            break;

        case AGREGAR_BORRAR_INJ:
        if (indiceagregarborrarinjt == 0) {
                estadoActual = AGREGAR;
				// estadoActual == 0;
            } else if (indiceagregarborrarinjt == 1) {
                estadoActual = BORRAR;
            } else if (indiceagregarborrarinjt == 2) {
                estadoActual = MENU_PRINCIPAL;
            }



		     break;
        case AGREGAR:
           // displayField();
	tecladoVirtual();
		     break;

	    case BORRAR:
        
		     break;

		case AYUDA:
        // switch (estadoActuall) {
        //         case 0: {
        //             u8g2.clearBuffer();  
        //             u8g2.setFont(u8g2_font_ncenB08_tr);  
        //             u8g2.drawStr(0, 12, "Ingresa tu nombre:");
        //             u8g2.sendBuffer();
                    
        //             String nombre = tecladoVirtual();
        //             if (nombre != "") {  // Si se ha ingresado un nombre
        //                 Serial.println("Nombre ingresado: " + nombre);
        //                 u8g2.clearBuffer();
        //                 u8g2.drawStr(0, 12, ("Nombre: " + nombre).c_str());
        //                 u8g2.sendBuffer();
        //                 delay(2000);
        //                 estadoActuall++;  // Cambiar al siguiente estado
        //             }
        //             break;
        //         }
        //         case 1: {
        //             u8g2.clearBuffer();  
        //             u8g2.setFont(u8g2_font_ncenB08_tr);  
        //             u8g2.drawStr(0, 12, "Ingresa tu numero:");
        //             u8g2.sendBuffer();
                    
        //             String numeroTexto = tecladoVirtual();
        //             if (numeroTexto != "") {  // Si se ha ingresado un número
        //                 int numero = numeroTexto.toInt();
        //                 Serial.println("Numero ingresado: " + String(numero));
        //                 u8g2.clearBuffer();
        //                 u8g2.drawStr(0, 12, ("Numero: " + String(numero)).c_str());
        //                 u8g2.sendBuffer();
        //                 delay(2000);
        //                 estadoActuall++;  // Cambiar al siguiente estado
        //             }
        //             break;
        //         }
        //         case 2: {
        //             u8g2.clearBuffer();  
        //             u8g2.setFont(u8g2_font_ncenB08_tr);  
        //             u8g2.drawStr(0, 12, "Ingresa un decimal:");
        //             u8g2.sendBuffer();
                    
        //             String decimalTexto = tecladoVirtual();
        //             if (decimalTexto != "") {  // Si se ha ingresado un decimal
        //                 float numeroDecimal = decimalTexto.toFloat();
        //                 Serial.println("Numero decimal ingresado: " + String(numeroDecimal));
        //                 u8g2.clearBuffer();
        //                 u8g2.drawStr(0, 12, ("Decimal: " + String(numeroDecimal)).c_str());
        //                 u8g2.sendBuffer();
        //                 delay(2000);
        //                 estadoActuall++;  // Cambiar al siguiente estado
        //             }
        //             break;
        //         }
        //         default: {
        //             Serial.println("Todos los datos fueron ingresados.");
        //             u8g2.clearBuffer();
        //             u8g2.setFont(u8g2_font_ncenB08_tr);  
        //             u8g2.drawStr(0, 12, "Datos ingresados.");
        //             u8g2.sendBuffer();
        //             delay(2000);
        //            // estadoPrincipal = MENU_PRINCIPAL;  // Regresar al menú principal
        //             break;
        //         }
        //     }
        
        solicitarYGuardarDatos();

       
		     break;

        case MENU_SELECCION_INYECTOR:
           
            // if (encoderButtonPressed()) { // Si el botón del encoder es presionado
                // Aquí se actualiza la selección de la motocicleta
                indiceMotoSeleccionada = indiceInyector;
                estadoActual = SELECCIONAR_MOTO;  // Ir a confirmar selección de motocicleta
            // }
            break;

		case SELECCIONAR_MOTO:
            if (indiceseleccionarmoto == 0) {
                estadoActual = SUBMENU_FUNCIONAMIENTO;
				// estadoActual == 0;
            } else if (indiceseleccionarmoto == 1) {
                estadoActual = MENU_CARACTERISTICAS;
            } else if (indiceseleccionarmoto == 2) {
                estadoActual = MENU_PRINCIPAL;
            }
		break;

 

        case MENU_CONFIRMA_MOTO:
       
            if (encoderButtonPressed()) {
                estadoActual = SELECCIONAR_MOTO;  // Confirmar selección y pasar al siguiente menú
            }
            break;

        // case MENU_PRUEBA:
        //     // Lógica del menú de prueba
        //     if (encoderButtonPressed()) {
        //         estadoActual = MENU_CARACTERISTICAS; // Ir a mostrar las características
        //     }
        //     break;

        case MENU_CARACTERISTICAS:
           
            if (encoderButtonPressed()) {
                estadoActual = SELECCIONAR_MOTO;  // Volver al menú anterior
            }
            break;

        // case MENU_RESISTENCIA:
        //     checkInjectorResistance();
        //     break;
        // case MENU_PRUEBA:
        //     if (indiceSubMenu == 0) {
        //         estadoActual = SUBMENU_MANUAL;
        //         indiceSubSubMenu = 0;
        //     } else if (indiceSubMenu == 1) {
        //         estadoActual = SUBMENU_AUTOMATICO;
        //     } else if (indiceSubMenu == 2) {
        //         estadoActual = MENU_SELECCION_INYECTOR;
        //         indiceSubMenu = 0;
        //     }
        //     break;
		case SUBMENU_FUNCIONAMIENTO:
        if (indicefuncionamiento == 0) {
			estadoActual = SUBMENU_MANUAL;
	
		} else if (indicefuncionamiento == 1) {
			estadoActual = SUBMENU_AUTOMATICO;
		} else if (indicefuncionamiento== 2) {
			estadoActual = SELECCIONAR_MOTO;
	
		}
		break;

		case SUBMENU_MANUAL:
            if (indiceSubSubMenu == 0) {
                checkInjectorResistance();
            } else if (indiceSubSubMenu == 1) {
                displayFlowRate();
            } else if (indiceSubSubMenu == 2) {
                mostrarResultado();
            } else if (indiceSubSubMenu == 3) {
                detectInjectorClickk();
            } else if (indiceSubSubMenu == 4) {
                pruebaDeAbanico();
            } else if (indiceSubSubMenu == 5) {
                showResults();
            } else if (indiceSubSubMenu == 6) {
                estadoActual = SUBMENU_FUNCIONAMIENTO;
                
            }
            break;
case SUBMENU_AUTOMATICO:
            // Lógica para realizar las pruebas automáticas
            checkInjectorResistance();
            displayFlowRate();
            mostrarResultado();
            detectInjectorClickk();
            pruebaDeAbanico();
            showResults();
            estadoActual = SUBMENU_FUNCIONAMIENTO;
            break;
        case ATRAS:
			estadoActual = SELECCIONAR_MOTO;
		break;
        
        

		case DEVOLVER:
			estadoActual = SUBMENU_FUNCIONAMIENTO;
            indicefuncionamiento = 0;
		break;

        default:
        break;
    }
}

// Función del teclado virtual que devuelve el texto seleccionado
String tecladoVirtual() {
    const char teclado[4][11] = {
        {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K'},
        {'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V'},
        {'W', 'X', 'Y', 'Z', '1', '2', '3', '4', '5', '6', '7'},
        {'8', '9', '0', '.', '-', '<', '>', ' ', ' ', ' ', ' '}
    };

    String textoSeleccionado = "";
    int fila = 0, columna = 0;
    int lastEncoderPosition = encoder.getCount();
    bool seleccionando = true;

  
    while (seleccionando) {
        int encoderPosition = encoder.getCount();
      u8g2.clearBuffer();
        u8g2.setFont(u8g2_font_ncenB08_tr);
        // Controlar el movimiento del cursor con el encoder
        if (encoderPosition != lastEncoderPosition) {
            if (encoderPosition > lastEncoderPosition) {
                columna++;
                if (columna > 10) {
                    columna = 0;
                    fila++;
                    if (fila > 3) {
                        fila = 0;
                    }
                }
            } else {
                columna--;
                if (columna < 0) {
                    columna = 10;
                    fila--;
                    if (fila < 0) {
                        fila = 3;
                    }
                }
            }
            lastEncoderPosition = encoderPosition;
        }

        // Detectar la presión del botón para seleccionar una letra/número o símbolo
        if (digitalRead(botonPin) == LOW) {
            char seleccion = teclado[fila][columna];
            if (seleccion == '-') {
                // Borrar la última letra
                if (textoSeleccionado.length() > 0) {
                    textoSeleccionado.remove(textoSeleccionado.length() - 1);
                }
            } else if (seleccion == '>') {
 // Si selecciona ">", terminar la selección y devolver el texto
                seleccionando = false;;
            } else if (seleccion == '<') {
                
                
			return ""; // Puedes devolver un valor vacío o lo que prefieras.

            }
			else {
                // Agregar la letra o número seleccionado
                textoSeleccionado += seleccion;
            }
            delay(200);  // Debounce para evitar múltiples selecciones
        }

        // Mostrar el teclado en pantalla
        u8g2.clearBuffer();
        u8g2.setFont(u8g2_font_ncenB08_tr);

        // Mostrar las letras/números del teclado con el cursor encima del número seleccionado
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 11; j++) {
                int x = j * 11; // Espaciado horizontal
                int y = (i + 1) * 12; // Espaciado vertical

                // Dibujar el cursor
                if (i == fila && j == columna) {
                    u8g2.drawStr(x, y, "[");
                    u8g2.drawStr(x + 9, y, "]");
                    u8g2.drawStr(x + 3, y, String(teclado[i][j]).c_str());
                } else {
                    u8g2.drawStr(x, y, String(teclado[i][j]).c_str());
                }
            }
        }

        // Mostrar el texto seleccionado hasta el momento
        u8g2.drawStr(0, 60, textoSeleccionado.c_str());

        // Enviar los datos a la pantalla OLED
        u8g2.sendBuffer();
    }
	    return textoSeleccionado; // Devolver el texto cuando selecciona ">"
}

void showResults() {
	    bool exit = false;
    while (!exit) {
 u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_5x8_tr); // Fuente compacta para más información

    // Encabezados
    u8g2.drawStr(0, 8, "Resultados finales:");
    u8g2.drawStr(0, 16, "Prueba   Estado");

    // Resultados de cada prueba
    for (int i = 0; i < 5; i++) {
        char linea[20];
        // Verifica si el resultado fue "Bien" (true) o "Mal" (false)
        sprintf(linea, "%s   %s", nombresPruebas[i], (resultados[i]) ? "Bien" : "Mal");
        u8g2.drawStr(0, 24 + (i * 8), linea);
    }

    // Calcular puntaje total
    int puntajeTotal = 0;
    for (int i = 0; i < 5; i++) {
        puntajeTotal += resultados[i] ? 1 : 0;
    }

    // Mostrar estado general del inyector
    const char* estadoInyector;
    if (puntajeTotal == 5) {
        estadoInyector = "Perfecto";
    } else if (puntajeTotal >= 3) {
        estadoInyector = "Regular";
    } else {
        estadoInyector = "Reparar";
    }

    char lineaFinal[20];
    sprintf(lineaFinal, "Estado: %s", estadoInyector);
    u8g2.drawStr(0, 64 - 8, lineaFinal);

    // Mostrar en la pantalla OLED
    u8g2.sendBuffer();
        // Enviar el contenido al display
        u8g2.sendBuffer();

        delay(1000); // Pequeño retardo para evitar rebotes y actualizar con frecuencia

        // Manejar el botón para salir
        if (digitalRead(botonPin) == LOW) {
            delay(50); // Debounce
            if (digitalRead(botonPin) == LOW) {
                while (digitalRead(botonPin) == LOW) {
                    delay(10); // Espera a que se suelte el botón
                }
                exit = true;
                estadoActual = SUBMENU_MANUAL;
            }
        }
    }
    
}



void solicitarYGuardarDatos() {
    // Obtener el siguiente índice disponible en el arreglo
currentIndex = getFirstAvailableIndex(nombresMotocicleta, 20);  // Ajustar según el tamaño máximo
if (currentIndex == -1) {
    Serial.println("No hay espacio disponible para agregar más datos.");
    return;
}
    String datos[7]; // Arreglo temporal para almacenar los 7 datos ingresados por el usuario

    // Mensajes para cada dato que se solicitará
    const char* mensajes[] = {
        "Ingresa el nombre de la moto:",
        "Ingresa la impedancia:",
        "Ingresa el tipo de valvula:",
        "Ingresa el caudal de combustible:",
        "Ingresa la presion de operacion:",
        "Ingresa el tipo de conector:",
        "Ingresa el angulo de atomizacion:"
    };

    // Recorrer y solicitar los 7 datos
    for (int i = 0; i < 7; i++) {
        bool datoValido = false;
        while (!datoValido) {
            u8g2.clearBuffer();
            u8g2.setFont(u8g2_font_ncenB08_tr);
            u8g2.drawStr(0, 12, mensajes[i]);  // Mostrar el mensaje en la pantalla
            u8g2.sendBuffer();
            delay(5000);  // Puedes ajustar el tiempo de espera

            String input = tecladoVirtual();  // Usar el teclado virtual para obtener el dato

            if (input != "") {
                datos[i] = input;  // Almacenar el dato ingresado en el arreglo
                datoValido = true;
            } else {
                u8g2.clearBuffer();
                u8g2.setFont(u8g2_font_ncenB08_tr);
                u8g2.drawStr(0, 12, "Dato invalido, intenta nuevamente.");
                u8g2.sendBuffer();
                delay(1000);
            }
        }
    }

    // Ahora guardar los datos en los arreglos y EEPROM
    for (int j = 0; j < 7; j++) {
        currentField = j;       // Actualizar el campo actual para cada dato
        guardarDato(datos[j]);  // Llamar a la función guardarDato que ya tienes
    }

    // Confirmación de guardado en la pantalla
    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_ncenB08_tr);
    u8g2.drawStr(0, 12, "Datos guardados exitosamente!");
    u8g2.sendBuffer();
    delay(2000);  // Pausar para que el usuario vea la confirmación
}

void guardarDato(String data) {
    switch (currentField) {
        case 0:
            // Asegúrate de que nombresMotocicleta sea un arreglo de tipo char[20][50] (por ejemplo)
            strncpy(nombresMotocicleta[currentIndex], data.c_str(), sizeof(nombresMotocicleta[currentIndex]) - 1);
            nombresMotocicleta[currentIndex][sizeof(nombresMotocicleta[currentIndex]) - 1] = '\0';  // Asegura el terminador nulo
            guardarEnEEPROM(nombresMotocicleta, currentIndex, data);
            break;
        case 1:
            strncpy(impedancias[currentIndex], data.c_str(), sizeof(impedancias[currentIndex]) - 1);
            impedancias[currentIndex][sizeof(impedancias[currentIndex]) - 1] = '\0';
            guardarEnEEPROM(impedancias, currentIndex, data);
            break;
        case 2:
            strncpy(tiposValvula[currentIndex], data.c_str(), sizeof(tiposValvula[currentIndex]) - 1);
            tiposValvula[currentIndex][sizeof(tiposValvula[currentIndex]) - 1] = '\0';
            guardarEnEEPROM(tiposValvula, currentIndex, data);
            break;
        case 3:
            strncpy(caudalCombustible[currentIndex], data.c_str(), sizeof(caudalCombustible[currentIndex]) - 1);
            caudalCombustible[currentIndex][sizeof(caudalCombustible[currentIndex]) - 1] = '\0';
            guardarEnEEPROM(caudalCombustible, currentIndex, data);
            break;
        case 4:
            strncpy(presionOperacion[currentIndex], data.c_str(), sizeof(presionOperacion[currentIndex]) - 1);
            presionOperacion[currentIndex][sizeof(presionOperacion[currentIndex]) - 1] = '\0';
            guardarEnEEPROM(presionOperacion, currentIndex, data);
            break;
        case 5:
            strncpy(tiposConector[currentIndex], data.c_str(), sizeof(tiposConector[currentIndex]) - 1);
            tiposConector[currentIndex][sizeof(tiposConector[currentIndex]) - 1] = '\0';
            guardarEnEEPROM(tiposConector, currentIndex, data);
            break;
        case 6:
            strncpy(angulosAtomizacion[currentIndex], data.c_str(), sizeof(angulosAtomizacion[currentIndex]) - 1);
            angulosAtomizacion[currentIndex][sizeof(angulosAtomizacion[currentIndex]) - 1] = '\0';
            guardarEnEEPROM(angulosAtomizacion, currentIndex, data);
            break;
        // Agregar más casos si es necesario.
    }
}




int getFirstAvailableIndex(char arreglo[][50], int maxItems) {
    for (int i = 0; i < maxItems; i++) {
        if (arreglo[i][0] == '\0') {
            return i;
        }
    }
    return -1;
}

void guardarEnEEPROM(char arreglo[][50], int index, String data) {
    int address = index * 51; // Espacio adecuado para cada entrada
    EEPROM.write(address, data.length()); // Guarda la longitud
    for (int i = 0; i < data.length(); i++) {
        EEPROM.write(address + 1 + i, data[i]); // Guarda el dato
    }
    EEPROM.write(address + 1 + data.length(), '\0'); // Terminador nulo
}



String leerDeEEPROM(int index) {
    int address = index * 50;
    int length = EEPROM.read(address);  // Leer la longitud del dato

    char buffer[51];  // 50 caracteres + 1 para el terminador nulo
    for (int i = 0; i < length; i++) {
        buffer[i] = EEPROM.read(address + 1 + i);
    }
    buffer[length] = '\0';  // Añadir terminador nulo al final
    
    return String(buffer);  // Devolver la cadena leída
}

void cargarDatosDeEEPROM() {
    for (int i = 0; i < 20; i++) {  // Ajustar según el tamaño máximo
        String nombre = "Prueba" + String(i); // Simulación de diferentes valores
        
        Serial.print("Nombre leído: ");
        Serial.println(nombre);

        if (nombre.length() > 0 && nombre.length() < sizeof(nombresMotocicleta[i])) {
            // Copiar el nombre al arreglo en la posición correspondiente
            strncpy(nombresMotocicleta[i], nombre.c_str(), sizeof(nombresMotocicleta[i]) - 1);
            nombresMotocicleta[i][sizeof(nombresMotocicleta[i]) - 1] = '\0';

            Serial.print("Nombre guardado en la posición ");
            Serial.print(i);
            Serial.print(": ");
            Serial.println(nombresMotocicleta[i]);
        }
    }
}




void mostrarDatosGuardados() {
    Serial.println("Datos guardados en EEPROM:");

    for (int i = 0; i < 20; i++) {  // Ajustar según el tamaño máximo
        if (nombresMotocicleta[i][0] != '\0') {  // Comprobar si no está vacío
            Serial.print("Moto: ");
            Serial.println(nombresMotocicleta[i]);
        }
        if (impedancias[i][0] != '\0') {
            Serial.print("Impedancia: ");
            Serial.println(impedancias[i]);
        }
        if (tiposValvula[i][0] != '\0') {
            Serial.print("Tipo de Válvula: ");
            Serial.println(tiposValvula[i]);
        }
        if (caudalCombustible[i][0] != '\0') {
            Serial.print("Caudal de Combustible: ");
            Serial.println(caudalCombustible[i]);
        }
        if (presionOperacion[i][0] != '\0') {
            Serial.print("Presión de Operación: ");
            Serial.println(presionOperacion[i]);
        }
        if (tiposConector[i][0] != '\0') {
            Serial.print("Tipo de Conector: ");
            Serial.println(tiposConector[i]);
        }
        if (angulosAtomizacion[i][0] != '\0') {
            Serial.print("Ángulo de Atomización: ");
            Serial.println(angulosAtomizacion[i]);
        }

        Serial.println("-------------");
    }
}

void displayField() {
	// // 		Serial.println("dispalyField: " + String(currentField));
    // // u8g2.clearBuffer();
    
    // switch (currentField) {
	// 	// Serial.println("dispalyField: " + String(currentField));
    //     case 0:
    //         u8g2.setCursor(0, 10);
    //         u8g2.print("Ingrese Nombre Motocicleta:");
    //         break;
    //     case 1:
    //         u8g2.setCursor(0, 10);
    //         u8g2.print("Ingrese la impedancia:");
    //         break;
    //     case 2:
    //         u8g2.setCursor(0, 10);
    //         u8g2.print("Ingrese Tipo de Valvula:");
    //         break;
		
	//     case 3:
    //         u8g2.setCursor(0, 10);
    //         u8g2.print("Ingrese caudal de combustible:");
    //         break;
	// 	case 4:
    //         u8g2.setCursor(0, 10);
    //         u8g2.print("Ingrese presion de operacion:");
    //         break;
	// 	case 5:
    //         u8g2.setCursor(0, 10);
    //         u8g2.print("Ingrese tipo de conector:");
    //         break;
	// 	case 6:
    //         u8g2.setCursor(0, 10);
    //         u8g2.print("Ingrese angulo de atomizacion:");
    //         break;
	//  default:
    //         u8g2.setCursor(0, 10);
    //         u8g2.print("Campo no definido.");
    //         break;
      
	// }
    
    // // Manejo del teclado virtual
    // char keyboard[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_. ";
    // static int selectedIndex = 0;

    // int position = encoder.getCount();
    // if (position != selectedIndex) {
    //     selectedIndex = position;
    //     encoder.clearCount();
    // }

    // u8g2.setCursor(0, 30);
    // u8g2.print("Seleccionado: ");
    // u8g2.print(keyboard[selectedIndex]);

    // // Agregar carácter seleccionado al inputData
    // if (digitalRead(botonPin) == LOW) { // Presionar encoder
    //     inputData += keyboard[selectedIndex];
    // }

    // // Botón de borrar
    // if (digitalRead(botonPin) == LOW && inputData.length() > 0) {
    //     inputData.remove(inputData.length() - 1); // Borra el último carácter
    // }

    // // Muestra la cadena temporal ingresada
    // u8g2.setCursor(0, 50);
    // u8g2.print("Dato: ");
    // u8g2.print(inputData);

    // // Botón de aceptar
    // if (digitalRead(botonPin) == LOW) {
    //     guardarDato(inputData);
    //     inputData = "";  // Reinicia el input para el siguiente campo
    //     currentField++;  // Pasa al siguiente campo
    // }

    // u8g2.sendBuffer(); // Muestra todo en pantalla
}
// Función para mostrar las motocicletas mientras se navega con el encoder
void mostrarSeleccionMotocicleta(int indice) {
    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_ncenB08_tr); // Ajusta la fuente para la pantalla
    u8g2.drawStr(0, 20, "Selecciona Moto:");
    u8g2.drawStr(0, 40, nombresMotocicleta[indice]); // Mostrar el nombre de la motocicleta seleccionada por el encoder
    u8g2.sendBuffer();
}

// Función para mostrar la motocicleta seleccionada
void mostrarMotocicletaSeleccionada(int indice) {
    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_ncenB08_tr); // Ajusta la fuente para la pantalla
    u8g2.drawStr(0, 20, "Moto seleccionada:");
    u8g2.drawStr(0, 40, nombresMotocicleta[indice]); // Mostrar el nombre de la motocicleta seleccionada
    u8g2.sendBuffer();
}

// Función para mostrar las características de la motocicleta seleccionada
void mostrarCaracteristicasMotocicleta(int indice) {
    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_ncenB08_tr); // Ajusta la fuente para la pantalla
    u8g2.drawStr(0, 10, nombresMotocicleta[indice]); // Mostrar el nombre
    u8g2.drawStr(0, 20, numerosParte[indice]); // Mostrar el número de parte
    u8g2.drawStr(0, 30, tiposValvula[indice]); // Mostrar el tipo de válvula
    u8g2.drawStr(0, 40, angulosAtomizacion[indice]); // Mostrar el ángulo de atomización
    u8g2.drawStr(0, 50, caudalCombustible[indice]); // Mostrar el caudal de combustible
    u8g2.drawStr(0, 60, presionOperacion[indice]); // Mostrar la presión de operación
    u8g2.sendBuffer();
}



void checkInjectorResistance() {
    
    int resistencia = analogRead(34);  // Ejemplo con el pin A2
    if (resistencia > 200 && resistencia < 500) {
        resultadoss[1] = true; // Prueba bien
    } else {
        resultadoss[1] = false; // Prueba mal
    }
	  u8g2.sendBuffer();
}



void compareResistances(float baseResistance, float testResistance) {
    // lcd.print("Comparando...");
    // delay(2000); // Simulación de comparación

    // lcd.clear();
    // lcd.print("Resultado:");
    // lcd.setCursor(0, 1);
    // if (baseResistance == testResistance) {
    //     lcd.print("Iguales");
    // } else {
    //     lcd.print("Diferentes");
    // }
}


void detectInjectorClickk() {

	    int CLIC = analogRead(34);  // Ejemplo con el pin A2
    if (CLIC > 200 && CLIC < 500) {
        resultadoss[4] = true; // Prueba bien
    } else {
        resultadoss[4] = false; // Prueba mal
    }

    // bool exit = false;
    // while (!exit) {
    //     int micValue = analogRead(36); // Utiliza el pin GPIO36 (A0) del ESP32

    //     // Limpiar la pantalla antes de dibujar
    //     u8g2.clearBuffer();

    //     // Mostrar el valor del micrófono
    //     u8g2.setFont(u8g2_font_ncenB08_tr); // Ajusta el tipo de letra
    //     u8g2.drawStr(0, 10, "Mic Value:");
    //     char micValueStr[10];
    //     sprintf(micValueStr, "%d", micValue); // Convertir el valor a texto
    //     u8g2.drawStr(80, 10, micValueStr);

    //     // Verificar si se detecta un clic
    //     if (micValue > 500) { // Umbral para detectar un clic
    //         u8g2.drawStr(0, 30, "Click detectado!");
    //     } else {
    //         u8g2.drawStr(0, 30, "                "); // Borra la línea con espacios
    //     }

    //     // Enviar el contenido al display
    //     u8g2.sendBuffer();

    //     delay(1000); // Pequeño retardo para evitar rebotes y actualizar con frecuencia

    //     // Manejar el botón para salir
    //     if (digitalRead(botonPin) == LOW) {
    //         delay(50); // Debounce
    //         if (digitalRead(botonPin) == LOW) {
    //             while (digitalRead(botonPin) == LOW) {
    //                 delay(10); // Espera a que se suelte el botón
    //             }
    //             exit = true;
    //             estadoActual = SUBMENU_MANUAL;
    //         }
    //     }
    // }

}


void pruebaDeAbanico() {
		    int ABANICO = analogRead(34);  // Ejemplo con el pin A2
    if (ABANICO > 200 && ABANICO < 500) {
        resultadoss[5] = true; // Prueba bien
    } else {
        resultadoss[5] = false; // Prueba mal
    }
    // float anguloX, anguloY, anguloZ;
    // bool exit = false;

    // while (!exit) {
    //     leerAngulosMPU(anguloX, anguloY, anguloZ);
        
    //     lcd.clear();
    //     lcd.setCursor(0, 0);
    //     lcd.print("Angulo X:");
    //     lcd.print(anguloX);
    //     lcd.setCursor(0, 1);
    //     lcd.print("Angulo Y:");
    //     lcd.print(anguloY);

    //     delay(1000);

    //     // Comparar con el rango esperado de ángulo de atomización para la motocicleta seleccionada
    //     float anguloEsperadoInicio = (angulosAtomizacion[indiceMenu][0] - '0') * 10 + (angulosAtomizacion[indiceMenu][1] - '0');
    //     float anguloEsperadoFin = (angulosAtomizacion[indiceMenu][3] - '0') * 10 + (angulosAtomizacion[indiceMenu][4] - '0');

    //     if (anguloX >= anguloEsperadoInicio && anguloX <= anguloEsperadoFin) {
    //         lcd.clear();
    //         lcd.setCursor(0, 0);
    //         lcd.print("Angulo OK");
    //     } else {
    //         lcd.clear();
    //         lcd.setCursor(0, 0);
    //         lcd.print("Angulo fuera de rango");
    //     }

    //     delay(2000);

    //     if (digitalRead(botonPin) == LOW) {
    //         delay(50); // Debounce
    //         if (digitalRead(botonPin) == LOW) {
    //             while (digitalRead(botonPin) == LOW) {
    //                 delay(10); // Espera a que se suelte el botón
    //             }
    //             exit = true;
    //             estadoActual = SUBMENU_MANUAL;
    //         }
    //     }
    // }
}

void displayFlowRate() {
			    int CAUDAL = analogRead(34);  // Ejemplo con el pin A2
    if (CAUDAL > 200 && CAUDAL < 500) {
        resultadoss[2] = true; // Prueba bien
    } else {
        resultadoss[2] = false; // Prueba mal
    }
    // bool exit = false;
    // while (!exit) {
    //     if ((millis() - oldTime) > 1000) {
    //         detachInterrupt(digitalPinToInterrupt(4));
    //         flowRate = ((1000.0 / (millis() - oldTime)) * pulseCount) / calibrationFactor;
    //         oldTime = millis();
    //         flowMillilitres = (flowRate / 60) * 1000;
    //         pulseCount = 0;
    //         attachInterrupt(digitalPinToInterrupt(4), pulseCounter, FALLING);
    //     }
    //     lcd.clear();
    //     lcd.setCursor(0, 0);
    //     lcd.print("Flujo: ");
    //     lcd.setCursor(0, 1);
    //     lcd.print(flowRate);
    //     lcd.print(" L/min");
    //     delay(1000); // Pequeño retardo para evitar rebotes y actualizar con frecuencia

    //     if (digitalRead(botonPin) == LOW) {
    //         delay(50); // Debounce
    //         if (digitalRead(botonPin) == LOW) {
    //             while (digitalRead(botonPin) == LOW) {
    //                 delay(10); // Espera a que se suelte el botón
    //             }
    //             exit = true;
    //             estadoActual = SUBMENU_MANUAL;
    //         }
    //     }
    // }
}

void mostrarResultado() {
    // bool exit = false;
    // while (!exit) {
    //     lcd.clear();
    //     lcd.setCursor(0, 0);
    //     lcd.print("Flujo (mL/s): ");
    //     lcd.setCursor(0, 1);
    //     lcd.print(flowRate);
        
    //     if (flowRate > 0) {
    //         lcd.setCursor(0, 2);
    //         lcd.print("Fuga detectada!");
    //     } else {
    //         lcd.setCursor(0, 2);
    //         lcd.print("No hay fuga");
    //     }
    //     delay(1000); // Pequeño retardo para evitar rebotes y actualizar con frecuencia
        
    //     if (digitalRead(botonPin) == LOW) {
    //         delay(50); // Debounce
    //         if (digitalRead(botonPin) == LOW) {
    //             while (digitalRead(botonPin) == LOW) {
    //                 delay(5); // Espera a que se suelte el botón
    //             }
    //             exit = true;
    //             estadoActual = SUBMENU_MANUAL;
    //         }
    //     }
    // }
}

void mostrarDatosInyector(int indice) {
    // lcd.clear();
    // lcd.setCursor(0, 0);
    // lcd.print("Datos del Inyector:");

    // lcd.setCursor(0, 1);
    // lcd.print("Num Parte:");
    // lcd.print(numerosParte[indice]);

    // delay(2000);

    // lcd.clear();
    // lcd.setCursor(0, 0);
    // lcd.print("Tipo Valvula:");
    // lcd.print(tiposValvula[indice]);

    // delay(2000);

    // lcd.clear();
    // lcd.setCursor(0, 0);
    // lcd.print("Impedancia:");
    // lcd.print(impedancias[indice]);

    // delay(2000);

    // lcd.clear();
    // lcd.setCursor(0, 0);
    // lcd.print("Angulo:");
    // lcd.print(angulosAtomizacion[indice]);

    // delay(2000);

    // lcd.clear();
    // lcd.setCursor(0, 0);
    // lcd.print("Caudal:");
    // lcd.print(caudalCombustible[indice]);

    // delay(2000);

    // lcd.clear();
    // lcd.setCursor(0, 0);
    // lcd.print("Presion:");
    // lcd.print(presionOperacion[indice]);

    // delay(2000);

    // lcd.clear();
    // lcd.setCursor(0, 0);
    // lcd.print("Conector:");
    // lcd.print(tiposConector[indice]);

    // delay(2000);
}